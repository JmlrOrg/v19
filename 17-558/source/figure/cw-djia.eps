%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: cw_djia.pdf
%%Creator: (Adobe Acrobat 15.7.0)
%%For: pei
%%CreationDate: 2018/9/5, 上午11:05
%%BoundingBox: 0 0 593 280
%%HiResBoundingBox: 0 0 592.1378 279.8957
%%CropBox: 0 0 592.1378 279.8957
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 808 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2018-09-04T22:11:52+08:00"
   xmp:ModifyDate="2018-09-05T11:05+08:00"
   xmp:MetadataDate="2018-09-05T11:05+08:00"
   pdf:Producer="Apache FOP Version 2.2.0-SNAPSHOT: PDFDocumentGraphics2D"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:3f1552c0-1fba-524a-b048-a019da31cf7a"
   xmpMM:InstanceID="uuid:7f93e50c-abba-5c4a-ad31-f0d87d6bc12a"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -279.896 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 279.896 li
592.138 279.896 li
592.138 0 li
cp
clp
3.13778 0 mo
592.138 0 li
592.138 270 li
3.13778 270 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
3.13778 0 mo
592.138 0 li
592.138 270 li
3.13778 270 li
cp
f
112.638 223.5 mo
536.138 223.5 li
536.138 20.0001 li
112.638 20.0001 li
cp
f
.5 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
112.638 223.5 mo
536.138 223.5 li
1 /0 /CSD get_res sepcs
.851 sep
@
112.638 20.0001 mo
536.138 20.0001 li
@
195.496 223.5 mo
195.496 219.265 li
@
279.192 223.5 mo
279.192 219.265 li
@
362.888 223.5 mo
362.888 219.265 li
@
446.583 223.5 mo
446.583 219.265 li
@
530.279 223.5 mo
530.279 219.265 li
@
195.496 20.0001 mo
195.496 24.235 li
@
279.192 20.0001 mo
279.192 24.235 li
@
362.888 20.0001 mo
362.888 24.235 li
@
446.583 20.0001 mo
446.583 24.235 li
@
530.279 20.0001 mo
530.279 24.235 li
@
%ADOBeginSubsetFont: Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /Helvetica
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000606376
7420000000000000012c0000036c6670676d000000000000049800000a1d
676c79660000000000005ebc0003f580686561640000000000000eb80000
0036686865610000000000000ef000000024686d74780000000000000f14
000022546c6f63610000000000003168000022586d617870000000000000
53c0000000206e616d6500000000000053e00000070c7072657000000000
00005aec000003cf67646972000000000000000000000000000303880190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300400009
fb020600fea4003d079a01cd2000019f4f010000042f05bd000000200000
05c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55
ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b
00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e
0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c
0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038
008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb
012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c
004200500051008400be012503daff680018003b0098009c009f00a100c1
00ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e1
03af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af
00c001000145016b0174019301950240028202b404850517fefd00060029
004700470048006f008800b400b900c400f200f901ef02180310037403c5
ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb
0106013001430150017d0194019501d3022a025502580277027802e6034e
035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b
0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e
0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c
0215022b0274029302ab02c202ce03690395039903df03f5043e050205a1
05e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e
005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c9
00c900e3011c00ed00f800f901000112011a0132014d014d014e014f0166
0169019e01ba01ba01be01e301ef01f602000200020902110217021c0253
0262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb
04050413041504470449008c046d049a049a04a604a804b204cf0539053e
054e055605800589058c036305d105d6067e068e06b206ef06f00728074c
076f078c00b400c900c000c10000000000000000000000000004012400af
0032006e0063014401620096014301a10161008a00740064018801ef0170
0028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd8
03aa00d70093006c0000008000a70442001d0597001d00820030002a002a
002a002a002a40292a292827262524232221201f1e1d1c1b1a1918171615
14131211100d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
9051582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b0004361
7d6818b0004360442d2c45b01a234445b01923442d2c2045b00325456164
b050515845441b2121592d2c20b0032552582359212d2c69b04061b0008b
0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0112b
b0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb017458cb0
172344b0177ae5182d2cb002254661658a46b040608b482d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019236a4445b01a23444565234520b00325606a20b009234223688a6a60
6120b0005258b21a401a4523614459b0005058b219401945236144592d2c
b9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b
2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d2c01
20b003252349b04060b0206320b000525823b002253823b002256538008a
63381b212121212159012d2c456920b00943b0022660b00325b005254961
b0805358b21940194523616844b21a401a4523606a44b209191a45652345
604259b00943608a103a2d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2c764520b0032545
23616818236860442d2c7645b00325452361682318456860442d2c7645b0
032545616823452361442d2c4569b014b0324b505821b0205961442db800
2b2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db8
002c2c2020456944b001602db8002d2cb8002c2a212db8002e2c2046b003
254652582359208a208a49648a204620686164b004254620686164525823
658a592f20b00053586920b000545821b040591b6920b000545821b04065
59593a2db8002f2c2046b00425465258238a592046206a6164b004254620
6a61645258238a592ffd2db800302c4b20b0032650585158b080441bb040
44591b21212045b0c05058b0c0441b2159592db800312c2020456944b001
602020457d691844b001602db800322cb800312a2db800332c4b20b00326
5358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b00326
53582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a2359
20b80003265358b0032545b8018050582321b8018023211bb00325452321
2321591b2159442db800342c4b535845441b2121592db800352c4bb80009
5058b101018e59b801ff85b800441db9000900035f5e2db800362c202045
6944b001602db800372cb800362a212db800382c2046b003254652582359
208a208a49648a204620686164b004254620686164525823658a592f20b0
0053586920b000545821b040591b6920b000545821b0406559593a2db800
392c2046b00425465258238a592046206a6164b0042546206a6164525823
8a592ffd2db8003a2c4b20b0032650585158b080441bb04044591b212120
45b0c05058b0c0441b2159592db8003b2c2020456944b001602020457d69
1844b001602db8003c2cb8003b2a2db8003d2c4b20b003265358b0801bb0
40598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b801
008a8a1b8a235920b0032653582321b801408a8a1b8a235920b800032653
58b0032545b8018050582321b8018023211bb003254523212321591b2159
442db8003e2c4b535845441b2121592db8003f2c4bb800095058b101018e
59b801ff85b800441db9000900035f5e2db800402c2020456944b001602d
b800412cb800402a212db800422c2046b003254652582359208a208a4964
8a204620686164b004254620686164525823658a592f20b00053586920b0
00545821b040591b6920b000545821b0406559593a2db800432c2046b004
25465258238a592046206a6164b0042546206a61645258238a592ffd2db8
00442c4b20b0032650585158b080441bb04044591b21212045b0c05058b0
c0441b2159592db800452c2020456944b001602020457d691844b001602d
b800462cb800452a2db800472c4b20b003265358b0801bb040598a8a20b0
032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a23
5920b0032653582321b801408a8a1b8a235920b80003265358b0032545b8
018050582321b8018023211bb003254523212321591b2159442db800482c
4b535845441b2121592db800492c4bb800095058b101018e59b801ff85b8
00441db9000900035f5e2db8004a2c2020456944b001602db8004b2cb800
4a2a212db8004c2c2046b003254652582359208a208a49648a2046206861
64b004254620686164525823658a592f20b00053586920b000545821b040
591b6920b000545821b0406559593a2db8004d2c2046b00425465258238a
592046206a6164b0042546206a61645258238a592ffd2db8004e2c4b20b0
032650585158b080441bb04044591b21212045b0c05058b0c0441b215959
2db8004f2c2020456944b001602020457d691844b001602db800502cb800
4f2a2db800512c4b20b003265358b0801bb040598a8a20b0032653582321
b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b0032653
582321b801408a8a1b8a235920b80003265358b0032545b8018050582321
b8018023211bb003254523212321591b2159442db800522c4b535845441b
2121592db800532c4bb800095058b101018e59b801ff85b800441db90009
00035f5e2db800542c2020456944b001602db800552cb800542a212db800
562c2046b003254652582359208a208a49648a204620686164b004254620
686164525823658a592f20b00053586920b000545821b040591b6920b000
545821b0406559593a2db800572c2046b00425465258238a592046206a61
64b0042546206a61645258238a592ffd2db800582c4b20b0032650585158
b080441bb04044591b21212045b0c05058b0c0441b2159592db800592c20
20456944b001602020457d691844b001602db8005a2cb800592a2db8005b
2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a1b8a
235920b0032653582321b800c08a8a1b8a235920b0032653582321b80100
8a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003265358
b0032545b8018050582321b8018023211bb003254523212321591b215944
2db8005c2c4b535845441b2121592d00000000010000000000006f400c9e
5f0f3cf500110800000000005f4d8f0000000000d383c768f865fc270b91
08f9000000090001000100000000000100000629fe2900000c01f865fced
0b9100010000000000000000000000000000089505120042000000000239
000002390000023900ed02d700520473000004730040071d004205560059
0187009c02aa008e02aa0044031d004e04ac005c023900aa02aa00550239
00af0239000004730040047300c404730040047300310473003404730042
0473004d0473004b0473004204730049023900e3023900e304ac001c04ac
005c04ac001c0473009c081f00e10556001e0556009705c7005a05c700a5
055600af04e300af0639006305c700a1023900c9040000230556009c0473
009c06aa009705c7009c06390050055600af0639005005c700b405560060
04e3002105c700aa05560034078d00250556002a0556002a04e3002f0239
00800239ffbb0239002f03c100780473000002aa00260473005204730076
0400003b04730038047300480239001c0473003d0473008401c7008401c7
ffda0400008001c7008906aa0084047300840473003b047300760473003c
02aa00890400004202390017047300800400000b05c700120400000b0400
00150400003402acffd50214009002ac002a04ac00120556001e0556001e
05c7005a055600af05c7009c0639005005c700aa04730052047300520473
00520473005204730052047300520400003b047300480473004804730048
0473004802390067023900080239000002390025047300840473003b0473
003b0473003b0473003b0473003b04730080047300800473008004730080
047300500333006f04730068047300380473004b02cd0095044cfff504e3
00c705e5001505e50012080000ed02aa008a02aa00520464005c08000010
0639004205b4002a0464005c0464005a0464005c0473ffe1049cffb403f4
006a05b400280696001c0464002f0231ff7902f6003b02ec00310625005e
071d004904e3005c04e300ba02aa00e804ac005c0464ffef047300280464
005c04e50071047300c2047300c2080000ed023900000556001e0556001e
0639005008000049078d00470473fffb080000f102aa004e02aa004e01c7
008401c700aa0464005c03f40042040000150556002a0156feaa05f40060
02aa00b402aa00aa0400001c0400001c047300500239009701c700aa02aa
004e0800000e0556001e055600af0556001e055600af055600af0239006b
0239fff902390020023900020639005006390050065200690639005005c7
00aa05c700aa05c700aa023900bd02aa002a02aafff702aa001502aa0019
02aa00f702aa008402aa007902aaffff02aa00a102aa002a0473ffe801c7
ffd7055600600400004204e3002f040000340214009005c700210473003d
0556002a04000015055600800473008004ac005c04ac007402aa005702aa
000b02aa000706ac005a06ac00a306ac004b04730000063900630473003d
023900c9055600600400004205c7005a0400003b05c7005a0400003b0473
00380556001e047300520556001e047300520556001e0473005205c7005a
0400003b05c7005a0400003b05c700a505480038055600af047300480556
00af04730048055600af04730048055600af04730048055600af04730048
063900630473003d063900630473003d063900630473003d0473003d05c7
00a10473008405c700350473003e038f00690371004403330059031f0065
0239003501c7ffdf063900c9038e00840400002301c7ffa3055600320400
fff10473009c021f00830473009c01c7000c0473009c021a004e0473009c
027b008905c7009c0473008405c7002a0473000a05c7009c047300840473
000e063900500473003b063900500473003b063900500473003b05c700b4
02aa008905c7004902aa001705c700b402aa004205560060040000420556
00600400004204e300210239001704e3002102e1001704e30021028fffe2
05c700aa0473008005c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080078d002505c700120556002a
0400001504e3002f0400003404e3002f04000034055600600400004204e3
0021023900170473004b0000fcfc0000fcfc0000fc9c0000fc680000fc86
0000fc8a0000fd690000fcc40000fcf60000fc700000fc9c0000fd5b0000
fcea0000fd120000fc9105c70021063900630473003d0473009c01c70089
0556009c0400008005c7009c0473008405c700b402aa008901aaffdb0237
00e102aa005501c7ffda040000800239001c04730048047300480400003a
047300510000fd3c0000fc660000fc8a0239fffb0239fffb05c7009c0473
00840000fcc4056d0024054c00980556009804270098059c002505560098
07f0000a0554004505c7009805c7009805560098057e002506aa009805c7
00980639005005c700980556009805c7005004e3001d0556002f06d80041
0556002505db009805360060078d009807a1009806aa001d070900980536
009805c700640800009805b7006a04730056047300480462008703390087
04d9001c04730050063d00170400003304ab008704ab0087046200870498
001b055400870473008704730048047300870473007d0400004804000033
0400001706a800460400001404910087044e005c063900870657008704e3
001b05c7008703ff00870414002f06390087047700500556009804730050
0427009803390087023900ba01c700870400002305c70050040000480239
001d020300290800002506c3001b07e10098067c008701c7ffdd05560062
0639004e0473001b0556009804620087040000480617001b0473001b0556
002f0400001705c700980473008704730098031d00870000fd5b0000fd5b
0000fd5b0000fd5b0000fc700000fd930000fd2a0000fc8a0000fcfc0000
fcfc0000fc860000fd690000fcc40000fcf60000fd930000fc9c0000fc9c
0000fc8a0000fc8a0000fc680000fc860000fc660000fc680000fc860000
fc660000fc660000fd500000fc660000fd5b0000fc8a0000fc8d0000fd2a
000000000239001b0473008306aa008302aa008806aa008302aa008902aa
0088042b0052042b005302020087033afffd02390017023900170400000a
05c70011040000140473009c0473009d0473009c0400008004b2003904b2
003905c7005905c7002104890049055600af055600600400004204980039
06e600aa05950080060a0052021400b6037300b6023900c3048c002b0400
003b0134005102aa00c102aa00c20b06000e055600ed029600ed02aa004e
01c700aa02aa0055044cfff5042f00c1042f00c2056500c1056500c202aa
0055029600ed02aa0055080000f102d500a4011d00000000000000000000
000000000000000000000000000000000000000002390000023900000239
000002390000023900000239000002390000023900000239000000000000
00000000000000000000000000000000011d0000008f000002aafff70370
00b60473009c02aa005502aa0006044c0072044c00730556001e04e300ae
04730048071c00500568003b0000fd5e0000fd5e0000fd5e0000fd5e0000
fcc90000fcd20000fd980000fccd0000fcef0000fce10000fcd90000fcec
0000fc5e0000fd440000fd4a0000fccf0000fcd10000fc860000fc910000
fcc10000fcc10000fcc10000fcc20000fcc20000fc8a01550061027b0061
0155006101550061046400320464002b03f4002d03f4002f05b4011305b4
00280231006b0231fe830464ff330464ffef0464002b0464002d08fa006f
0816006f0556009c023900c9047200c906ab00c9078f00c905560034078f
003409c800340c010034078f00c90556002a078f002a09c8002a0473009c
05c7005a05c700a506aa009701c70084038e00840555008405c700840400
000b05c7000b078e000b0955000b05c700840400000b05c7000b078e000b
01c700890400003b0473003806aa008409e2007408c1004f07db003807da
006b05a7007102f7005808e7007106f0006b05a100530556001e04730052
0239001e0239ffff063900500473003b05c700aa0473008005c700aa0473
008005c700aa0473008005c700aa0473008005c700aa047300800556001e
047300520556001e0473005208000010071d0049063900630473003d0556
009c04000080063900500473003b063900500473003b01c7ffbe09cd0054
08fc006f07fb00380639006305c7009c047300840556001e047300520800
0010071d00490639004204e3005c0556001e047300520556001e04730052
055600af04730048055600af047300480239ff7101c7ff350239fff801c7
ffaa063900500473003b063900500473003b05c700b402aaffd605c700b4
02aa004f05c700aa0473008005c700aa0473008005c700a1047300840556
001e04730052055600af04730048063900500473003b063900500473003b
063900500473003b063900500473003b0556002a0400001502aa004e0239
00c90556001e047300520556009704730076055600970473007605560097
0473007605c7005a0400003b05c700a50473003805c700a50473003805c7
00a50473003805c700a50473003805c700a504730038055600af04730048
055600af04730048055600af04730048055600af04730048055600af0473
004804e300af0239001c063900630473003d05c700a10473008405c700a1
0473008405c700a10473008405c700390473001b05c700a1047300840239
ffec01c7ff9e02390027023900160556009c040000800556009c04000080
0556009c040000800473009c01c700890473009c01c7ff9d0473009c01c7
ffb50473009c01c7ffc006aa009706aa008406aa009706aa008406aa0097
06aa008405c7009c0473008405c7009c0473008405c7009c0473008405c7
009c04730084063900500473003b063900500473003b063900500473003b
063900500473003b055600af04730076055600af0473007605c700b402aa
008905c700b402aa008305c700b402aa004a05c700b402aa001805560060
040000420556006004000042055600600400004205560060040000420556
00600400004204e300210239001704e300210239001704e300210239ffe2
04e300210239ffe705c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080055600340400000b05560034
0400000b078d002505c70012078d002505c70012078d002505c70012078d
002505c70012078d002505c700120556002a0400000b0556002a0400000b
0556002a0400001504e3002f0400003404e3002f0400003404e3002f0400
0034047300840239001005c70012040000150239001c0556001e04730052
0556001e047300520556001e047300520556001e0473ffcb0556001e0473
00520556001e047300520556001e047300520556001e047300520556001e
047300520556001e047300520556001e047300520556001e047300520556
00af04730048055600af04730048055600af04730048055600af04730048
0556008c0473fff0055600af04730048055600af04730048055600af0473
0048023900ae02390099023900c701c70084063900500473003b06390050
0473003b063900500473003b063900500473ffd8063900500473003b0639
00500473003b063900500473003b071c00500568003b071c00500568003b
071c00500568003b071c00500568003b071c00500568003b05c700aa0473
008005c700aa0473008006e600aa0595008006e600aa0595008006e600aa
0595008006e600aa0595008006e600aa059500800556002a040000150556
002a040000150556002a040000150556002a04000015055600af04730048
055600af04730048056d007505df009604860052048600870723000a0589
0017056d002404860043056d002404860043056d00750486005208d90010
06dd0012054f0043040a003005df00960486008705df0096048600870655
00500486005205df006004120037056d001004120019056d001004120019
056d00100412001905ac005e047a0069074800980600008d08000010071d
004906aa009706aa008405c700b402aa004c0222ffc50556001b05c700c5
04e300d505c70029055600c504e3004805c700b006390071023900ba0556
00b00556002f071d00be05c700b004e300620639007105c700b0055600c5
04e3005804e1002f0556002905c700500558003d06a8007f063900640239
000a0556002904e3005a04e300b40473001204e3006804730077038d004a
04e3003b04e5008f023900b0047300b00473002504e300b8047300420400
007104e3006f04e300aa0473004c04e3006f0400003b04e300b805c70077
0473000e05c7008f0610006a0239000a04e300b80239009a0222000b0000
fd19023900b0016c0088016c00880000fcfc0000fcfc016c008802ca001a
02b5001a03050088031200880222002e0222002f031e00880362006f0333
00880362006f0735007f0625005e0639ffef01c7008401c700aa047200ed
06ac009c06ac00ed04730048047300480556001e04730052047300520556
00af04730048055600af04730048055600af047300480239fff00239ffdb
01c70079063900500473003b063900500473003b063900500473003b0556
00600400004205c700aa047300800400000b06e600aa0595008006020061
0473ffd605c7fff20473008406aa008403f0009c0460009a03a6005a03e9
000c02cf00020448005c06020061047300500655004e0486004c06390050
02aa001e07c6002407c6002408e6ffca0000f9200000fa0b0000fa0b0000
fa060000fa0606020061047300500655004e0486004c0222002f02b5001a
0473002504e3002f040000340473003b04d2008404dc00380473007204bd
003804d7003d0473008204d7008202220086078d00470387008802aa0086
04d2003c04b80032052b00320772003805600017043a001705ce001c04c2
008904b8008901a9008a01a9008a01c700aa0187007802aa000802aa00c1
02aa003a0187007802aa000802aa00c102aa003a01a9008a01a9008a02aa
001e02aafff7023a0042023a004100e4ffed015500450155004401c40044
02e400090200000b023a004e023a004f0256000e0256000e025600240256
002402aa00550256002e0256002e0256002e020000210200000600e30044
0256003a023a000902560024025600240256000e0256000e02aa0078023a
004f0000fccd0000fca20000fca20000fd6f0000fd6f0000fc490000fc49
0000fb9e0000fca20000fc490000fccd0000fcc20000fcc2000000000239
0000000000000000000000000000031d004e031d004e06da00c107c60024
023900e308e6009c07c60024071d00d00703001b02390080023900800000
00000000000000000000000000000000000000000000067b003a023a0020
0239001a02390021023a002702390025023a0021023900240256002e0155
002b0256002e0155004701550022023a0042023a0020023a006202390020
023900180239001a02390021023a002702390025023a0021023900240256
002e0155002b0256002e0155004701550022063c0011063900630473009c
0473009c0556002a06ab002806000030075600110473007207c8005806ac
005a05c7005a0556005904e500710696001c06ab003406ab0028055600af
04730076055600af0473007604e300020639005004c400a1024100230369
001105c7005002bb0023033afffd0473009c0473009c01c7002a01c7002a
0473003d04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a05c1005b05b3005b076c00880776008807760088078d0088
07ca006f07a0006f04730077047300770473007704730077047300770473
007706c2008806c200880874008808890088085b00880868008804e3003b
04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b0733
00880733008808e5008808fa008808cc008808d900880929006f0929006f
023900b0023900b002390041023900390239003d0239003d023900230239
002303a5008803a5008805570088056c0088053e0088054b0088059b006f
059b006f04e3006f04e3006f04e3006f04e3006f04e3006f04e3006f07a5
008807a5008809570088096c0088093e0088094b008804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b806c200880889
00880868008808b8006f0610006a0610006a0610006a0610006a0610006a
0610006a0610006a0610006a07910088079100880943008809580088092a
0088093700880987006f0987006f04e3005a04e3005a0473007704730077
04e3003b04e3003b023900b0023900b004e3006f04e3006f04e300b804e3
00b80610006a0610006a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a0811005b080c005b0991008809d80088097f
0088099b008809d3006f09ce006f04e3003b04e3003b04e3003b04e3003b
04e3003b04e3003b04e3003b04e3003b096c0088096c00880b1e00880b33
00880b0500880b1200880b62006f0b62006f0610006a0610006a0610006a
0610006a0610006a0610006a0610006a0610006a09ca008809ca00880b7c
00880b9100880b6300880b7000880bc0006f0bc0006f04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a04e3005a0556001b0556001b0666
002e0661002f07a9001b04e3003b04e3003b04e3003b04e3003b04e3003b
06ac002e06a7002f06d2002e06ba002f083100b00239ffcf0239ffce0239
ffcc0239ffda0239ffdc0239ffc50239ffe10239ffee0343002e0348002f
04e300b804e300b804e300b804e300b804e300aa04e300aa04e300b804e3
00b8055600290556002906b1002e0713002f06c200880610006a0610006a
0610006a0610006a0610006a075a002e0789002f0792002e07a9002f0878
005e04e3005a0473007704e3003b023900b004e3006f04e300b80610006a
05d5007206a7002f06ba002f0348002f0789002f0713002f07a9002f0239
ffcb04e300b804ac002504ea011704f700a102f3001b02bb002304730025
04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a0239ffd70239ffe40239ffd20239ffd70239ffdb0239ffdb0239
ffcd0239ffe00239ffc80239ffc30239ffdc0239ffdc0239ffd70239ffd7
0239ffd20239ffcd0239ffd20239ffd704e300b804e300b804e300b804e3
00b804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b80666
002e0661002f05c1005b076c00880776008805b3005b07760088078d0088
0666002e0661002f05c1005b076c00880776008805b3005b07760088078d
00880343002e0348002f0348002f03a5008805570088053e008803a50088
056c0088054b00880343002e0348002f0348002f03a5008805570088053e
008803a50088056c0088054b008806b1002e0713002f0713002f06c20088
088900880868008806c20088088900880868008806b1002e0713002f0713
002f06c20088088900880868008806c20088088900880868008805c700b4
05c7005a0639005001c70020051d0029055600af05c700a10000fd310552
00680473003806390050047300480772005b0738004505e5001306ac003d
06ac003d06ac003a06ac003a066d001d04e3001b082200d005e1008a06a8
007f05c7008f0556001e0400000b079900d005cf008a04da003802ca0024
05d900160588003805c700b404730052031f000004da00a103eb00a10649
00a104cf00840556009c0400008004e3002f0400003408d9001406dd0030
054f0072040a0047056d00a50412007a05df00ac0486009105df00630412
003f04f8002b0412003a056d002e0412002405ac00ac047a007705ac00ac
047a00770556002a0556002a04d900bc037c009105ac00ac047a00770632
00a504df007a075f00ac059b00910556002a0556002a06fe0028054e0035
0748003a059400260748003a059400260772004805b3003805df00ac0486
009104730052054f00ac054f00ac06a8007f04dc005d0855004405e00026
05560025040000040556003404b6000b0400003b054f0072040a004705f1
0026049c0024023900bd056d002e04120024055600340556001e05c7005a
0400003b0473ffe804e3002101c7003e02bb002304e30021055600af0473
009c0473009c055600af047300480456002301c7ffda05c700aa01a90021
01a9002102aa003302aa003302aa003a02aaffe9023900e302aa003c02aa
003c057f005b04ac002504ac0074023900e304ac0025057c004c04ac0074
023900e3023900e3063900710412003f0412003f055600ae0473008005c7
005a06aa009705dd0097059b004605c7005a05c7005a05c7005a0400003b
0400003b0400003b0473003805ca003006c6002e063f002f031f001a062e
001904e900310488004502aa00be02aa00be02aa00be02aa00be0277003b
0277003b034b0000034b0000034b0000034b0000034b00000487001203f7
001e045e0054043600830436008302fd005d034f0012069900390655003e
052900300000f86506e1002204e9002001e0004b01e9004b015d0025015d
000a0199002a0198001202fb001703040017026700130257001202570012
02c8004b01d8000701d8000707e9003a097c004b0931004909310002013c
004b04570022058900050589000d04be00150442001801d8000701d80007
03fe003d03fe003d0404003a036f000b0467003c0000fb760000fcc10000
fc080000fc730000fc730000fa630000fce00000fe950000fc8e0000fc51
0000fa0b0000fc9f0465003604650022040100340401002407760017044c
001b03ea001d051a00340653003204c8003306c200880889008808680088
0556001b0556001b0239ffdf0239ffe105560029055600290404001505e5
001405e5001405e500140800ffeb0800ffeb080003b40800038c080003b4
0800038c0800ffe90800ffe9080003b40800038c0800ffe90800ffe90800
00000404001500e40042023a0029023a0024023a001e02000006023a0024
05c7005a0639006305c7005a047100220552002904e300210556001e04d0
002805c2004e04d9004e05c7005a06aa008405d0003106640037082d0035
0552006805520068039c003f0380003b039c003f0380003b039c00530381
003c039c00530381003c02eb005302e3005302e3005302e3005302eb0053
02eb000802e3000002e3000002e3000002eb000803630053036300530363
00530363005303630053027f00010330004503b2002603c3000b050b0031
069c00290390007f0000fc4f0000fc4f0000fc420000fc420000fc420000
fc420000fc010000fc010000fd4404650022040100240a3900500873003b
0436008304360083043600830329003a0329003a03550028050d00340329
005403290028032900330329003302f6003a02f6003a0329002b0143005e
02d7005b04bb005e0329005e0329002a02d70029032900270329002a0329
0054019400100329005b0373003704bb005e02d70008037800800329000d
0378004a04dc004d0632002a04be0033047300390473003b04e6003804e1
003a04fa0039076e003e0329000a0143005e01e400610329005b02d70008
037800800329000d037800790329000a042b005205c5001001c70084045e
0054070a002e06cb003504d6001b04fa001a02d8000d04e9001b0330000d
02d9000a02db000c01c700aa02aa004e01c700aa02aa004e01c700aa02aa
004e01c700aa02aa004e053d007a0708003b0310008f0574009708c00022
0473004002e00034047300400473003104730034047300420473004d0430
002b047300420473004903cc000903cc000903cc00090428005803b7006b
0497007104b0004f0797004a0418006a045a005505d5004c07a9004404bf
004b03e0003b0965004a03f900560419004e06ed004a0420003f04500050
06a3004a03f3004d0633006006b90047064000440419004b0667004503be
003e043d003d03d60052048400440412004a041600460497003903fa0058
0650002d03cd005e0560005604950032045e005503e9003e0462005406c2
0049044500f604d500b10473005e0473002f000000000000006c0000006c
0000006c0000006c000000cc0000011c0000028000000430000005c00000
07500000079400000824000008a80000099800000a0000000a6400000aa0
00000ae000000b2800000c0400000c5000000d6800000ec000000f5c0000
1084000011b000001244000013a8000014d40000152c000015a80000163c
0000168c0000172400001828000019d800001af000001bf800001d180000
1ddc00001e6400001ec80000201800002088000020b80000213c00002230
00002280000023980000244400002540000025ec00002760000028740000
2a0c00002a6800002af800002bb400002d4c00002e4400002f0800002fa0
00002ff800003058000030bc000031540000317c000031a80000333c0000
341000003514000035ec00003780000038180000396800003a0800003a64
00003ad800003bb800003bfc00003cf400003dac00003e9c00003f800000
4068000040f4000042b400004354000044080000453400004690000046f0
0000481c000048bc0000499c000049e000004adc00004b9800004bb00000
4bc800004d9000004da800004dc000004dd800004df000004e0800004e20
00004e3800004e5000004e6800004e800000502c000050440000505c0000
50740000508c000050a4000050bc000050d4000050ec000051040000511c
000051340000514c000051640000517c00005194000051ac000051c40000
51dc00005238000052b00000547400005600000057cc00005858000058cc
000059e400005b8400005ce800005dcc00005dfc00005e6400005f440000
60280000620400006358000063e000006480000065300000665000006750
0000688800006954000069b400006a6400006aec00006c4800006d1c0000
6e3c000070640000720c0000730400007368000073ac0000745c00007598
000076900000771c000077cc00007880000078ec000078ec000079040000
791c0000793400007a6000007c4000007c7800007cb400007d5400007de4
00007e4400007ea400007f1400007ffc000080140000802c0000808c0000
81f800008268000082d80000839c0000844c000084d0000085280000858c
0000862000008848000088600000887800008890000088a8000088c00000
890c0000897c000089fc00008a4800008a6000008a7800008b2000008b38
00008b5000008b6800008b8000008bd000008c1400008c9800008cc40000
8d2000008d5000008e6400008f4800008f900000905c0000909c0000916c
000091fc000092140000922c000092440000925c000092b8000093a80000
95100000952800009540000095f8000096c4000096ec000097a4000097f0
000098a80000999c00009a9400009ba400009d7000009e2800009f9c0000
a1140000a16c0000a39c0000a5d80000a5f00000a6080000a6200000a638
0000a7000000a7180000a7300000a7c80000a98c0000a9a40000a9bc0000
a9d40000a9ec0000aa040000aa1c0000aa340000ab6c0000ab840000ab9c
0000ac480000ad500000ad680000ad800000ad980000adb00000adc80000
ade00000adf80000ae100000ae280000ae400000ae580000ae700000ae88
0000aea00000aeb80000afa00000afb80000b0580000b0700000b0b40000
b0cc0000b1c40000b1dc0000b2640000b27c0000b2940000b2ac0000b2c4
0000b2dc0000b2f40000b30c0000b3240000b33c0000b3cc0000b42c0000
b4440000b45c0000b4740000b48c0000b4a40000b4bc0000b4d40000b4ec
0000b5040000b51c0000b5340000b6b00000b8180000b8300000b8480000
b8600000b8780000b8900000b8a80000b8c00000b8d80000b8f00000b908
0000b9200000b9380000b9500000b9680000b9800000ba980000bab00000
bac80000bae00000baf80000bb100000bb280000bbf40000bcdc0000bcf4
0000bd0c0000bd240000bd3c0000bd540000bd6c0000bd840000bd9c0000
bdb40000bdcc0000bde40000bdfc0000be140000be2c0000bfc00000c154
0000c1e80000c2e40000c44c0000c4780000c4a80000c4ec0000c5700000
c59c0000c5fc0000c62c0000c68c0000c79c0000c7e40000c8240000c878
0000c9540000ca200000ca4c0000cb380000cb500000cb6c0000cb840000
cb9c0000cbb40000cbcc0000cbe40000cbfc0000cc140000cc2c0000cca8
0000cd200000cd4c0000cd9c0000ce040000ce7c0000cf340000cfec0000
d0b00000d2340000d2f40000d3200000d3800000d3980000d3b00000d450
0000d5140000d55c0000d5b40000d6a80000d8380000d8740000d9440000
d9a40000da500000dbc40000dc5c0000dd240000dd900000de200000dedc
0000df640000e0b00000e1180000e1fc0000e2f00000e3380000e3a80000
e5500000e5bc0000e6400000e6e80000e75c0000e8080000e8fc0000e9f8
0000eae40000ebcc0000ecf40000ee6c0000eff80000f1c80000f3340000
f3700000f4340000f5200000f5c80000f7040000f79c0000f8640000f8cc
0000f9580000fa140000fa9c0000fbd80000fc3c0000fd880000fe7c0000
fec40000ff3000010178000101e000010264000103040001037800010424
0001051800010614000106fc000107c0000108dc00010a1c00010abc0001
0bc800010c2000010c7c00010cac00010cfc00010d8c00010e5c00010f18
00010f9800011018000111640001129c000113c0000114e4000115680001
16b8000117700001185c000118e80001197000011a5800011b9c00011c98
00011d4800011df400011e6800011edc00011f4800011fb4000120080001
205c000120b0000121040001215000012184000121ec000122600001228c
000122b8000122e4000123140001237400012484000124b4000124f40001
253800012594000125f400012678000126a4000126d00001275400012780
000127ac000127ec00012908000129480001299c000129fc00012a8c0001
2af400012af400012b9400012c2c00012cfc00012d6c00012e6800012ed8
00012f480001304400013190000131e40001326c0001330c000133b00001
33f800013470000134f4000135d8000136bc0001379c0001380c00013918
00013a2000013af800013c1800013d7c00013ddc00013f48000140440001
409c00014154000142240001438c000143bc000144200001447c0001452c
000145e80001463c0001466c0001469c00014a7c00014ae000014b100001
4bb800014c1400014c4000014cc400014d0c00014d5000014db000014e0c
00014e3800014e6800014e9400014ec000014ef400014ef400014ef40001
4ef400014ef400014ef400014ef400014ef400014ef400014ef400014ef4
00014ef400014ef400014ef400014ef400014ef400014ef400014ef40001
4ef400014ef400014ef400014ef400014ef400014ef400014ef400014f30
00014f94000150bc000150e8000150fc00015154000151b4000151cc0001
5224000152dc0001545c000155c800015620000156bc00015758000157b0
0001592c000159d400015a2000015b3400015bd800015c9000015d8c0001
5e2400015f0000015f740001601c00016060000160c0000161000001612c
00016194000161dc0001622400016270000162bc000163300001635c0001
63a0000163cc000163f80001641000016420000164380001644800016460
00016470000164880001649c000164b4000164c4000164dc000164ec0001
65040001651c0001652c0001653c00016554000165740001658c0001659c
000165b4000165d4000165fc00016614000166240001663c0001665c0001
666c0001667c0001668c0001669c000166ac000166c4000166e4000166fc
0001670c00016724000167440001676c0001678400016794000167ac0001
67cc000167dc000167ec000167fc0001680c0001682c0001684c0001686c
000168840001689c000168b4000168cc000168e4000168fc000169140001
692c000169440001695c000169740001698c000169a4000169bc000169dc
000169fc00016a1c00016a3c00016a5c00016a7c00016a9c00016abc0001
6adc00016afc00016b1c00016b3c00016b5400016b6c00016b8400016b9c
00016bb400016bcc00016be400016bfc00016c1c00016c3c00016c540001
6c6c00016c8400016c9c00016cb400016ccc00016ce400016d0400016d24
00016d3c00016d5400016d6c00016d8400016d9c00016db400016dcc0001
6de400016dfc00016e1400016e2c00016e4400016e5c00016e7400016e8c
00016ea400016ebc00016ed400016eec00016f0400016f1c00016f340001
6f4c00016f6400016f7c00016f9400016fac00016fc400016fdc00016ff4
0001700c000170240001703c000170540001707400017094000170b40001
70d4000170ec0001710400017124000171440001715c0001717400017184
00017194000171ac000171c4000171dc000171f40001720c000172240001
723c000172540001726c000172840001729c000172b4000172cc000172e4
000172fc000173140001732c000173440001735c00017374000173940001
73b4000173d4000173f40001740c000174240001743c0001745400017474
00017494000174ac000174c4000174dc000174f40001750c000175240001
753c000175540001756c000175840001759c000175b4000175cc000175e4
000175fc0001761400017634000176540001766c000176840001769c0001
76b4000176cc000176e4000176fc0001771400017734000177540001776c
000177840001779c000177b4000177cc000177e4000177fc000178140001
782c000178440001785c000178740001788c000178a4000178bc000178d4
000178ec0001790400017924000179440001796400017984000179a40001
79c4000179e400017a0400017a1c00017a3400017a4c00017a6400017a7c
00017a9400017aac00017ac400017ae400017b0400017b1c00017b340001
7b4c00017b6400017b7c00017b9400017bb400017bd400017bf400017c14
00017c3400017c5400017c6c00017c8400017c9c00017cb400017ccc0001
7ce400017cfc00017d1400017d2c00017d4400017d5c00017d7400017d8c
00017da400017dc400017de400017e0400017e2400017e3c00017e540001
7e6c00017e8400017e9c00017eb400017ecc00017ee400017efc00017f14
00017f2c00017f4400017f5c00017f7400017f8c00017fa400017fbc0001
7fd400017fec000180040001801c000180340001804c000180640001807c
00018094000180ac000180c4000180dc000180f40001810c000181240001
813c000181540001816c0001818c000181ac000181cc000181ec0001820c
0001822c0001824c0001826c0001828c000182ac000182cc000182ec0001
830c0001832c0001834c0001836c0001838c000183ac000183cc000183ec
000184040001841c000184340001844c000184640001847c0001849c0001
84bc000184dc000184fc0001851c0001853c0001855c0001857c0001859c
000185bc000185d4000185ec000186040001861c000186340001864c0001
86640001867c0001869c000186bc000186dc000186fc0001871c0001873c
0001875c0001877c0001879c000187bc000187d4000187ec000188040001
881c000188340001884c000188640001887c00018894000188ac000188c4
000188dc000188f40001890c000189240001893c000189540001896c0001
89840001899c000189b4000189cc000189e4000189fc00018a1400018a2c
00018a4400018a5c00018a7400018a8c00018aa400018abc00018adc0001
8afc00018b1c00018b3c00018b5400018b6c00018b8400018b9c00018bb4
00018bcc00018be400018bfc00018c1400018c2c00018c4400018c5c0001
8c7400018c8c00018ca400018cbc00018cd400018cec00018d0400018d1c
00018d3400018d4c00018d6400018d7c00018d9400018dac00018dc40001
8ddc00018df400018e0c00018e2400018e3c00018e5400018e6c00018e7c
00018e8c00018ea400018ebc00018ed400018eec00018fa4000190040001
9184000191c0000191fc0001925c000192a400019324000194a4000194d4
0001953c0001958400019638000196bc0001971000019878000198dc0001
99b000019a0800019a5000019ab000019c4000019cac00019dec00019f54
00019fdc0001a0740001a1bc0001a3840001a41c0001a5940001a6e80001
a8000001a8a00001a99c0001aa0c0001aa780001aaf40001abf40001ac38
0001adb00001aef00001b0140001b12c0001b27c0001b2fc0001b37c0001
b5080001b5d40001b6880001b8200001b8d00001b9880001b9d40001ba34
0001ba980001baf40001bb500001bbac0001bbd80001bc080001bc640001
bcfc0001bda00001be100001be800001beac0001bed80001bf480001bfd4
0001c0440001c0d80001c2680001c3d40001c5340001c5900001c5ec0001
c6040001c61c0001c6340001c6540001c6740001c6940001c6b40001c6d4
0001c6ec0001c7040001c7240001c7440001c7640001c7840001c7a40001
c7c40001c7dc0001c7f40001c80c0001c82c0001c84c0001c86c0001c88c
0001c8a40001c8bc0001c8dc0001c8fc0001c9140001c92c0001c9440001
ca000001caf00001cb980001cc2c0001cd380001cd740001ce500001cf4c
0001cfc00001d0380001d1740001d2300001d3200001d3d00001d4640001
d53c0001d5800001d5e40001d6480001d8900001d9380001d99c0001da00
0001da2c0001da580001da700001da880001daa00001dab80001dae40001
db7c0001dc0c0001dc800001dcf40001dd840001de4c0001df940001e0d0
0001e1f40001e3540001e4380001e5500001e5c40001e7200001e7dc0001
e8980001e9d80001eab00001eb680001eca80001ee940001ef940001f104
0001f2500001f2b40001f3140001f3b00001f40c0001f43c0001f4680001
f4980001f4c40001f4f40001f51c0001f5480001f5740001f5d40001f670
0001f6b00001f6f00001f78c0001f8700001f8dc0001f9500001f9cc0001
fa600001fad40001fb4c0001fc300001fd140001fd540001fd940001fdd8
0001fe1c0001fe480001feb00001ff180001ff84000200e8000201500002
0180000201cc00020268000202ac000202f0000203300002037000020480
00020564000205b0000205f00002063000020680000206d0000207300002
07900002080c0002084c000208b0000208fc000209d000020a0c00020a0c
00020a0c00020a0c00020a0c00020a0c00020aa000020bac00020c240002
0c8800020d1000020d2800020dd000020f0c00020fb0000210240002109c
0002109c0002109c0002109c0002109c0002109c0002109c0002124c0002
1374000213f8000214e0000216340002168400021868000219cc00021a34
00021a5c00021a9c00021b5000021bfc00021ca800021dd000021e100002
1ebc00021ff40002207800022160000222b400022304000224e400022648
000226b0000226d800022718000227cc00022878000228dc000229f80002
2a3400022a7000022acc00022b4c00022d4000022e2000022e9800022f70
00022fc8000230a80002324000023280000232f800023310000233200002
34000002352c0002360c0002372c000237b4000238f80002397800023a20
00023ab000023c2c00023cb800023d6800023ec000024014000240680002
40c0000241ec000242040002421c000242340002424c000242640002427c
00024294000242ac000242c4000242dc000242f40002430c000243240002
433c000243540002436c000243840002439c000243b4000243cc000243e4
000243fc000244140002442c000244440002445c000244740002448c0002
44a4000244bc000244d4000244ec000245040002451c000245340002454c
000245640002457c00024594000245ac000245c4000245dc000245f40002
460c000246240002463c000246540002466c000246840002469c000246b4
000246cc000246e4000246fc000247140002472c000247440002475c0002
47740002478c000247a4000247bc000247d4000247ec000248040002481c
000248340002484c000248640002487c00024894000248ac000248c40002
48dc000248f40002490c000249240002493c000249540002496c00024984
0002499c000249b4000249cc000249e4000249fc00024a1400024a2c0002
4a4400024a5c00024a7400024a8c00024aa400024abc00024ad400024aec
00024b0400024b1c00024b3400024b4c00024b6400024b7c00024b940002
4bac00024bc400024bdc00024bf400024c0c00024c2400024c3c00024c54
00024c6c00024c8400024c9c00024cbc00024cdc00024cfc00024d1c0002
4d3c00024d5c00024d7c00024d9c00024dbc00024ddc00024dfc00024e1c
00024e3c00024e5c00024e7c00024e9c00024ebc00024edc00024efc0002
4f1c00024f3c00024f5c00024f7c00024f9c00024fbc00024fdc00024ffc
0002501c0002503c0002505c0002507c0002509c000250bc000250dc0002
50fc0002511c0002513c0002515c0002517c0002519c000251bc000251dc
000251fc0002521c0002523c0002525c0002527c0002529c000252b40002
52cc000252ec00025304000253240002533c0002535c000253740002538c
000253a4000253bc000253d4000253f40002540c0002542c000254440002
54640002547c00025494000254ac000254c4000254dc000254f40002550c
000255240002553c000255540002556c000255840002559c000255b40002
55cc000255e4000255fc000256140002562c000256440002565c00025674
0002568c000256a4000256bc000256d4000256ec00025704000257240002
573c0002575c0002577400025794000257ac000257c4000257dc000257f4
0002580c000258240002583c000258540002586c000258840002589c0002
58b4000258cc000258e4000258fc000259140002592c000259440002595c
000259740002598c00025a5c00025aa800025afc00025bb400025c200002
5c3800025c5800025c7800025c9800025cb800025cd800025cf800025d18
00025d3800025d5800025d7800025d9800025db800025dd800025df80002
5e1800025e3800025e5800025e7800025e9800025eb800025ed800025ef8
00025f1800025f3800025f5800025f7800025f9800025fb800025fd80002
5ff80002601800026038000260580002607800026098000260b8000260d8
000260f80002611800026138000261580002617800026198000261b80002
61d8000261f80002621800026238000262580002627800026298000262b8
000262d0000262e800026300000263180002633000026348000263600002
637800026390000263a8000263c0000263d8000263f00002640800026420
00026438000264500002646800026488000264a0000264b8000264d00002
64e800026500000265180002653000026548000265680002658000026598
000265b0000265c8000265e0000265f80002661000026628000266480002
66600002667800026690000266a8000266c0000266d8000266f000026708
0002672800026740000267580002677000026788000267a0000267b80002
68e000026a0c00026b8c00026be400026c9800026dac00026e6800026ea0
00026f4000026f5800027040000270dc000272d800027508000276e00002
78fc00027bb800027da000027f04000280280002814c0002824800028310
000284500002850400028580000285fc000286d8000287c4000288740002
891800028a0000028b1800028c1400028e7000028f5800028fa400028ff0
000290840002912c000291c400029260000292c80002932c000294000002
94d4000296c400029924000299b400029a3800029ac800029b5800029c88
00029dac00029e1000029e7800029f0800029f9c0002a0300002a0dc0002
a1600002a1f40002a2500002a2ac0002a3040002a35c0002a41c0002a4d4
0002a5800002a61c0002a6e00002a7680002a80c0002a8900002a9280002
a9a80002aaa00002ab900002ad200002aeac0002af400002aff80002b098
0002b1440002b31c0002b4380002b5540002b6dc0002b8100002b95c0002
baac0002bb1c0002bb840002bc280002bcdc0002bdac0002bee00002c02c
0002c0d00002c1780002c1a80002c2480002c2e00002c3280002c39c0002
c4c00002c6000002c67c0002c7240002c7740002c7e00002c8480002c920
0002ca040002cacc0002cba80002ccfc0002cdb00002ce580002ceec0002
cf2c0002cf8c0002cfd40002d0200002d04c0002d0d00002d12c0002d194
0002d1d80002d2940002d3300002d3b00002d40c0002d4a80002d5800002
d6000002d6800002d7200002d7f80002d88c0002d9240002da140002db40
0002dc180002dce80002ddb00002df180002dff80002e0fc0002e2080002
e2d80002e3cc0002e4c40002e5fc0002e7ac0002e89c0002e9a00002ea54
0002eafc0002ebc00002ecc00002ecfc0002ed380002ed740002edac0002
edf80002ee340002ee780002eebc0002ef100002ef640002efbc0002eff8
0002f0540002f0d80002f1900002f2480002f3980002f40c0002f4ec0002
f6480002f7500002f7900002f8c80002fa040002fa400002fafc0002fb34
0002fb6c0002fc240002fce00002fd280002fdf00002ff0c0002ffa40003
003c000300ac000300d800030104000301ac000301d4000302180003025c
000302bc000303040003038400030404000304fc0003054c000305780003
05a400030754000308c40003099400030a6800030b7c00030c2800030c90
00030d0c00030d7c00030e1000030e6c00030ebc00030eec00030f800003
111000031174000311c000031290000313640003143800031514000316fc
000317f0000318f4000319e000031af400031c6c00031c8400031c9c0003
1cb400031d1c00031db800031dfc00031e7400031ed800031f7000032058
0003227000032488000326300003265c00032688000326bc000326f00003
272c00032768000327a4000327e00003281c0003285800032894000328d0
000328fc000329e400032a3000032bb000032c5800032d7000032dd80003
2e8800032fac00033104000332400003338c000334c40003356000033664
0003382c00033ab800033ccc00033e3000033fa4000340580003422c0003
43d8000344300003448c00034530000345ec000346900003474c000347f8
000348b80003496400034a2400034ae400034ba000034c5c00034d180003
4dd400034e9400034f500003500c000350c800035188000351c400035210
0003525c000352a8000352e4000353a4000353f40003549c000354e00003
5608000357dc000358340003597800035ac000035afc00035b3800035b74
00035bb000035c0400035c5400035cc800035d9c00035e7800035e900003
5ea800035f84000360440003610400036288000364000003651c00036724
0003682c00036930000369dc00036a8c00036b8400036c8400036db00003
6e0000036e7000036f480003701000037128000371f80003727800037348
0003747000037518000375bc0003769000037760000377a4000379640003
7a0000037b8800037c5c00037dac00037ec000037f94000380a8000381cc
000382a80003845c000385c000038690000386e000038754000387f80003
883c000389fc00038a9800038bbc00038c8c00038de400038e8400038ed4
00038f500003910000039258000393ec00039580000396d8000398880003
998800039a6000039bc400039c2000039cd000039d2c00039dd400039e34
00039ee000039f3c00039fe80003a1580003a1c00003a2e40003a4f80003
a5680003a6980003a6e00003a7cc0003a9640003a9ec0003aad80003ac30
0003ac840003ae700003afdc0003b0200003b05c0003b0a00003b1740003
b2f00003b4c40003b6140003b8640003b9300003bab80003bd240003bee0
0003bfe80003c1640003c3a80003c4fc0003c6a00003c8480003c9d00003
cb400003ccc00003cda00003d0b40003d2ac0003d52c0003d6080003d7c0
0003d8b00003da780003dbe40003ddb80003ded00003e08c0003e2640003
e3d00003e6b00003e8ec0003eb3c0003ecd00003ee100003efdc0003f178
0003f3880003f40c0003f45c0003f54c0003f58000010000089500920009
006b0007000200100010005d000007e80a1d000400010000003902b20001
000000000000005000000001000000000001000900500001000000000002
000700590001000000000003001f02160001000000000004000902350001
0000000000050008023e0001000000000006000902460001000000000007
0032024f0001000000000012000903f80001000000000100000904010001
0000000001010010040a0001000000000102000e041a0001000000000103
0014042800010000000001040012043c00010000000001050009044e0001
000000010007002f02810001000000020007003c02b00001000000030007
003002ec0001000000040007003a031c0001000000050007003603560001
0000000600070030038c0001000000070007003c03bc0003000104030002
000c01580003000104040002000600cc0003000104050002000e01760003
000104060002000c00e60003000104070002000c007c0003000104080002
000801920003000104090002000e006000030001040b0002001000f20003
0001040c0002000e006e00030001040d00020008019a00030001040e0002
000c01a20003000104100002001000a80003000104110002000a00880003
000104120002000600b80003000104130002001000980003000104140002
000c01020003000104150002000e010e0003000104160002000c00da0003
000104180002000c01c60003000104190002000e012a00030001041a0002
0012016400030001041b0002000e01d200030001041d0002000c01380003
0001041e00020008014400030001041f0002000c014c0003000104210002
000e01ae0003000104220002001201e000030001042a0002001801fe0003
000104390002000c01f200030001043e0002000a01bc0003000108040002
000600920003000108090002000e01840003000108160002000e011c0003
00010c010002000800d2000300010c0a0002000e00bea920313939302d32
303036204170706c6520436f6d707574657220496e632e20a92031393831
204c696e6f7479706520414720a920313939302d3931205479706520536f
6c7574696f6e7320496e632e48656c766574696361526567756c61720052
006500670075006c006100720043006f007500720061006e0074004e006f
0072006d0061006c30ec30ae30e530e930fc5e3889c44f53005200650067
0075006c006900650072005200650067006f006c006100720065c77cbc18
ccb40052006500670075006c006100726a196e969ad406390627062f064a
004e006f0072006d0061006c004e006f0072006d0061006c004e006f0072
006d00610061006c0069004e006f0072006d0061006c0052006500670075
006c006100720052006500670075006c00610072041e0431044b0447043d
044b0439004e006f0072006d0061006c0e1b0e010e150e34004e006f0072
006d0061006c004e006f0072006d0061006c0052006500670075006c0061
0072006e00690052006500670075006c006100720052006500670075006c
00610072039103c003bb03ac05e805d205d905dc004e006f0072006d00e1
006c0052006500670075006c0065007200420069006100730061004e006f
0072006d0061006c0052006500670075006c006100720417043204380447
04300439043d043804390928093f092f092e093f09240054006800f4006e
006700200074006801b01edd006e006748656c7665746963613b2031322e
30643165333b20323031362d30362d313248656c76657469636131322e30
6431653348656c76657469636148656c7665746963612069732061207265
67697374657265642074726164656d61726b206f66204c696e6f74797065
20414748656c7665746963612065737420756e65206d617271756520648e
706f738e65206465204c696e6f7479706520414748656c76657469636120
6973742065696e2065696e676574726167656e657320576172656e7a6569
6368656e20646572204c696e6f7479706520414748656c76657469636120
8f20756e206d61726368696f207265676973747261746f206469204c696e
6f7479706520414748656c7665746963612069732065656e206765726567
69737472656572642068616e64656c736d65726b2076616e204c696e6f74
79706520414748656c766574696361208a72206574742072656769737472
6572617420766172756d8a726b6520669a72204c696e6f74797065204147
48656c76657469636120657320756e61206d617263612072656769737472
616461206465204c696e6f7479706520414748656c766574696361206572
20657420726567697374726572657420766172656dbe726b652074696c68
bf72656e6465204c696e6f7479706520414748656c7665746963614c6967
617475726573436f6d6d6f6e204c69676174757265734e756d6265722053
706163696e6750726f706f7274696f6e616c204e756d626572734d6f6e6f
737061636564204e756d626572734e6f204368616e6765000000b800532b
b800492bb8003f2bb800352bb8002b2b4118008001a6009001a600a001a6
00030069018b0079018b0089018b0099018b00040089018b0099018b00a9
018b00b9018bb2040840ba0179001a014a400b041f5414191f180a0b1fd2
b80106b49e1fd918e3bb0119000d00e10119b20d0009410a01a0019f0064
001f01a50025017a00480028019ab3296c1f60410a01a9007001a9008001
a90003008001a9000101a9b21e321fbe012c00250401001f0126001e0401
b61fe7312d1fe531b80201b21fc227b80401b21fc11eb80201400f1fc01d
9e1fbf1d671fbe1d671fab27b80401b21faa29b80401b61fa91d6c1f931e
b8019ab21f921db80101b21f911db80101b21f751db80201b61f6d29961f
6431b8019ab21f4c96b802abb21f391db80156400b1f3638211f351de41f
2f27b80801400b1f2d1d4c1f2a31cd1f241db802abb21f201eb801254011
1f1c1d931f3a1d4c1f1e1d45273a1d4527bb01aa019b002a019bb2254a1f
ba019b0025017ab349293896b8017bb348283125b8017a40364828962948
2725294c1f252946272729482756c80784075b07410732072b0728072607
21071b071408120810080e080c080a08080807b801acb23f1f06bb01ab00
3f001f01abb308060805b801aeb23f1f04bb01ad003f001f01adb7080408
0208000814b8ffe0b40000010014b801abb41000000100b801abb6061000
00010006b801adb300000100b801ad401f04000001000410000001001002
000001000200000001000002010802004a00b0018db806008516763f183f
123e113946443e113946443e113946443e113946443e113946443e113946
60443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0324b5358b0ff
1d592b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b65422b2b4b5279b376706a
66456523456023456560234560b08b766818b080622020b16a7045652345
20b003266062636820b003266165b070236544b06a234420b17666456523
4520b003266062636820b003266165b066236544b0762344b10066455458
b166406544b27640764523614459b36242725d4565234560234565602345
60b089766818b080622020b172424565234520b003266062636820b00326
6165b042236544b072234420b1625d4565234520b003266062636820b003
266165b05d236544b0622344b1005d455458b15d406544b2624062452361
44592b2b2b2b456953427374b8019a2045694b20b02853b049515a58b020
615944b801a620456944750000>
[16257 16277 16153 16221 16373 16377 16265 16181 16381 16269 16333 16361 16205
16201 16177 15441 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 2856 19 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>Helvetica AddT42Char 
1 3076 20 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>Helvetica AddT42Char 
1 3152 21 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>Helvetica AddT42Char 
1 3432 22 <00010031ffd9041a059a003100c4401f490c532d6529632d7529752d0696
26014b082b0a182b140d03f93114350d20b8012340141135107f0d0d311b
3524050735310d1896274411b8014a400f0a382e6f021f29208103270233
47321076c418d4edf4ed10f5ededf4ed003fed3fed12392ff4fde610ed10
ed111239011112393130437940362f301926000905261d25222606000328
00040308300a28011c231f28001a251828010401072800092f0728001e21
1b280119261b2801002b2b2b2b012b2b2b103c2b2b2b2b818181005d015d
0402353316171633323635342623220607351e0133323736353426232207
06072334373621321615140706071e01151400230116e5bc0c2846b78eac
b5a11225131c26166541729865b4452605b2406e0115dbf0472c46717ffe
f2f8270117c88b3f719878947601019f03022038906b7478427aa070c8c3
b98452331d1fb180cdfefe000000>Helvetica AddT42Char 
1 3776 23 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>Helvetica AddT42Char 
1 3932 24 <00010042ffdc041c0580002000bb402b4812881f02390c46135713671304
3a080c0d07000c0a0f0e0e75121313120e0f201213070013170a17350ab8
0122401a0d7f0e0e1d123a0f04043520c71d0d1107381a6f003820224721
1076c418d4edf5edc4003feded3ffd12392fe4f4ed111239011112393912
3939872e2b7d10c5001239011112393931301843794028181f0109022603
1e00280001001f20051c0728010918072801011f042800061b0428000819
0a2801002b2b2b012b2b103c103c2b2b8181005d5d131617163332363534
262322060727132115210336373633320415140221222427fd127d4054a0
9ab7805d852f9c6d02e8fd9f3d322d5069c50112fbfeedaffef310016d9a
3b1ecc7c96a44840090303aefe72261321fec3cbfecac5cc0000>Helvetica AddT42Char 
1 9536 51 <000200af000004f805bd000a001400614035690c6912790c7a1204481458
1468147a140407081e1110100a010e0f1e0100020a080206120c04091414
31041a160f092500191516b8010bb3219589182b2b4ef44dfd3c4e10f64d
fd11121739003f3f3cfd3c1012392f3cfd3c015d31305d13213216151406
2321112300272623211121323635af0295c4f0d6defe32c70380784273fe
74018c86a705bdddc8acfffd9304b93a1ffe03729000>Helvetica AddT42Char 
1 13588 71 <00020038ffda03ed05c2000b001d00774032370e470e570ea704a91b0525
0814020f1d1000081d1d07130a021d170b052e132e102911121a1f0b271a
191e1f87217242182b2b4ef44ded4e10f63c4dfde4e4003fed3f3fed3f11
39113931304379401a181c090a000101180b2600091c0b26000019022600
0a1b0826012b2b012b2b818181005d121633323635342623220615001716
1711331123350e0123220035341233f692a17da1a67a88a9018a53303dad
a23fac6fb3fefaefde015fe8d7c9cbc3d0ca0237341e4b021dfa3e956358
012dfaea0157>Helvetica AddT42Char 
1 13804 72 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>Helvetica AddT42Char 
1 14856 76 <000200840000013b05bd000300070036401c07e50400010006030a091717
1a06010229070300190809aa216242182b2b4ef43c4dc4fd3cc44e456544
e6003f3f3c3f4ded3130133311231133152384b7b7b7b7042afbd605bdcc
0000>Helvetica AddT42Char 
1 15788 82 <0003003bffd90421044e000c0018001900904033980896109916a504a808
a610a916b808c808d704e50ee9140c3a08061d18070c1d120b1907191915
02270f1a1b092715191a1bb80109b321725d182b2b4ef44ded4e10f64ded
12392f003f3fed3fed31304379402c001704260b13092600001102260107
17092600050d0226010a140c260001100c26000816062601030e0626012b
2b2b2b012b2b2b2b2b81005d241235342726232206151416331200111002
212200351000330702e085304cbaa59696a3d6011efcfef7ddfefc0112e7
0674010fa6965e94fcb2abe403dafeecfef4fefdfeae012bfc010e014005
>Helvetica AddT42Char 
2 232 85 <000100890000029204470011004f40262703260d37034704040e0810020e
0911090c270805070006110a081a13012e10291100191213b80145b32162
7e182b2b4ef43c4dfde44e10e6003f3f4d3fc4fdc4111239390111123931
30005d1333153e0133321617152e0123220615112389ab15a46b05181d10
1b108892b4042fb9369b0203be0302af72fd9800>Helvetica AddT42Char 
1 0 0 <00020042000004d005bd000300070043b800532bb800082fb800042fb800
0810b80000d0b800002fb8000410b80003dcb8000010b80007dcb8000310
b80009dc00ba0007000000562bba0002000500562b303133112111271121
1142048eb8fce205bdfa43b8044dfbb30000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/zero 19 def
/one 20 def
/two 21 def
/three 22 def
/four 23 def
/five 24 def
/P 51 def
/d 71 def
/e 72 def
/i 76 def
/o 82 def
/r 85 def
end
Helvetica /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 80 /P put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 111 /o put
dup 114 /r put
pop
end
%ADOEndSubsetFont
/QABMDF+Helvetica /Helvetica findfont ct_VMDictPut/QABMDF+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four /five 26{/.notdef}rp /P 19{/.notdef}rp /d /e 3{/.notdef}rp /i 5{/.notdef}rp /o 2{/.notdef}rp /r 141{/.notdef}rp]QABMDF+Helvetica nfQABMDF+Helvetica*1 [16 0 0 -16 0 0 ]msf181.996 244.7 mo(100)[8.896 8.896 0 ]xsh265.692 244.7 mo(200)[8.896 8.896 0 ]xsh349.388 244.7 mo(300)[8.896 8.896 0 ]xsh433.083 244.7 mo(400)[8.896 8.896 0 ]xsh516.779 244.7 mo(500)[8.896 8.896 0 ]xshQABMDF+Helvetica*1 [17.6 0 0 -17.6 0 0 ]msf297.888 267.2 mo(Period)[11.739 9.78561 5.86066 3.90692 9.78561 0 ]xsh112.638 223.5 mo
112.638 20.0001 li
@
536.138 223.5 mo
536.138 20.0001 li
@
112.638 181.688 mo
116.873 181.688 li
@
112.638 123.894 mo
116.873 123.894 li
@
112.638 66.1005 mo
116.873 66.1005 li
@
536.138 181.688 mo
531.903 181.688 li
@
536.138 123.894 mo
531.903 123.894 li
@
536.138 66.1005 mo
531.903 66.1005 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QABMDF+Helvetica gcheck setglobal} if

1 0 3 <> QABMDF+Helvetica AddT42Char 
1 2720 17 <000100af0000018000da000300264013012a030a0517171a016400190405
64216365182b2b4ef44dfd4e456544e6003f4ded313037331523afd1d1da
da000000>QABMDF+Helvetica AddT42Char 
1 4528 26 <0001004b0000042f0580000f00534036050b1902380b3a0c390d4a0d5502
56046202b7070a7c0db40dc50d030209010d0e3a000f04090c020d080000
6f0e083809ac0e1147101076c418d4f4ed10e511123939003f3f3cfd3c39
1239015d31305d01150602070607060723121336372135042f45e558572d
1d2ec744e88997fce805809d43feb4c0bb9a63dc019a0196eeadb500>QABMDF+Helvetica AddT42Char 
1 4676 27 <00030042ffd7041a059c000b0017003200cb4047560157095a0f59136401
65096b0f691377250949107b197623722573277c317c3288198720872788
2e883198190d47083208250e0225320b3511112c05351e0517352c0d0238
21b80186b70e38296f2f08381bb80186b514382f3447331076c418d4edf4
ed10f5edf4ed003fed3fed12392fed39390111123912393130437940352a
2e1c201216030d162d1428000c2b0e28010a12082800061d082800041f02
2801152e1728000d2a172800071c0528010320052801002b2b2b2b012b2b
2b2b2b81818181015d005d00363534262322061514163312363534262322
061514163300272635343633321615140706071617161514022322243534
363702a48680838274966688a5aa8581a3959cfeb52a4fe8d5ceea442650
59335ffee8d1fedf7c7a0340855c5086865a6572fd3b87868b90938270a3
02a02b5080a0e6d99186532f2d293564a0bdfef9e3d87fb93100>QABMDF+Helvetica AddT42Char 
1 7160 38 <0002005affda057105e5001d001e00b1403b1b0597019605031f011f0482
018705891305530803861d111115063a1d030c3a15091e021e1e19033102
3b1031111a20093119191f20a1216a66182b2b4ef44ded4e10f64dedf4ed
12392f003f3fed3fed12392f10ed31304379403a001c172513260e251b26
0b160932000d1410320112110f10071c0932000500033201010204030a18
0c32000f120c3200081a06320104010632012b2b2b2b01103c103c2b2b10
3c103c2b2b2b2b2b2b815d015d080117232e012322001110123332373637
3306070621202726111037362123041e013411c221c5b2d9fef5f1efdc73
3d1ec21a92affed7ff00aee5acba01472805e5fedabb8ea6fecffec5fefe
febfa95991e89dbd9bcd01ac0145d0e20000>QABMDF+Helvetica AddT42Char 
1 11188 58 <000100250000077105bd000c0156409508090178077909780b8701860405
47014b02440348044d08420a8908870ac802c703c707c80b0c580b670768
0b890286038607890b9902960395079a0ba902a603a507aa0b0f0808070a
080b1908160a5707060b08040a023e284528052506060700250c0c0b0904
01030b020305060c050002080a0b0307080e17171a0705068640080304f4
0a0209f4800b0001860c190d8e5e182b194e10f4184dfd39391afd3939fd
39391afd3939194e456544e618003f173c3f173c12173901874d2eed872e
ed4b5279b4090a09080ab8019a400f120101020405030406070908090a08
b8019a400a12040403010102000c0b877d1008c5872e18052b087d10c587
0810c5872e18052b087d10c54b5179b301010002b8019ab6090a09040405
03b8019a400f090908040503040607010001020c0b870810c0870810c087
10057afd1808c4188710057afd7d08c4313001725d5d71005d7213090133
090133012309012301fd0115014cd8014c0115dafe7ed1feadfeabd1fe80
05bdfb5504abfb5504abfa4304c2fb3e05bd>QABMDF+Helvetica AddT42Char 
1 12712 68 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>QABMDF+Helvetica AddT42Char 
1 14696 75 <00010084000003ed05c200160053402c0607070817071708270427137507
750808130d0213150000111d0607150c0a0d290a1a180115290016191718
b80106b3216242182b2b4ef43c4dfd3c4e10f64ded003f3c3fed3f113939
0112393130005d1333113637363332171615112311342726232206151123
84b440335782e9532db91e318770b6b405c2fddc512139a3599efd5102a3
7637589ad6fdc8000000>QABMDF+Helvetica AddT42Char 
1 15288 79 <000100890000013d05bd0003002940150000030a0517171a010229000319
0405aa216242182b2b4ef43c4dfd3c4e456544e6003f3f31301333112389
b4b405bdfa430000>QABMDF+Helvetica AddT42Char 
1 15356 80 <0001008400000625044700260085403b0708070e060f1708170e170f2708
270e270f4819560b670b0c23250a1a1d23190a02041725211d171d0d0607
00061b1c2503130a2817171a112914b80101b21a291db80101400a00012e
25292600192728b8010db3216242182b2b4ef43c4dfde410f4edf4fd4e45
6544e6003f173c3f3f3c4deded111217390111123912393130005d133315
36373633321716173e013332171615112311342623220615112311342726
23220615112384b240345971804e2c243ca265d84e2abb6b4d6a99b71a29
7066a7b4042f984f243d3f244656539c548efd3702e86b508ea6fd9102bb
6d324b9ecffdc800>QABMDF+Helvetica AddT42Char 
2 820 87 <00010017ffef0209055a00180052b50d2e0ac00e01b8013f402504163917
03060e0a111a17171a0301062900150e150f031f030203fc1619191afc21
677d182b2b4ef44dfd5d39c42f3cfd3c104e456544e6002f3f3f3c4dfd3c
ed10fde431301333113315231114171633323637150e0123222635112335
33a8b6abab2615310d1e141f43277e5a9191055afed593fd4538130b0102
8e0908816702c5930000>QABMDF+Helvetica AddT42Char 
2 980 88 <00020080ffe303de044900170018005e403ab814c8140209130814191319
1428067703d707070800050e0a00060d0a051d120b180718180b160d2e0a
290c0b1a1a01291619191ad2216242182b2b4ef44ded4e10f63c4dfde411
12392f003f3fed3f3f3c391112393130005d015d01111417163332373635
11331123370607062322272635112501381a3083bc4425b4aa0223346793
e5532d01af042ffd39523460a85a9d020efbd19e3d2a5499528902d81a00
>QABMDF+Helvetica AddT42Char 
2 1160 89 <0001000b000003ea042f00060102402e4201c50102006700680268036706
87048805a700a802084700480245044a0586048905c704c8050849287328
0708b80109b321677e182b2b4b5279b8ff70b40105042004b80183b70303
6d1202010205b80183401e06066d12000001050604030101050203060300
0605040a0817171a03af02ba018400000184b301af0619194ef4184dfde0
e0fd194e456544e618003f3c3f173c1239011112391239074d2e2b104ee4
4d072e2b104ee44d2b4b5179402502291203030400291206060501050203
0603000605040a0817171a020403af050001af0619194ef4184dfd3939fd
3939194e456544e618003f3c3f173c12390507102b07102b313001715d00
5d7113090133012301dc011e012bc5fe6cc0fe75042ffc980368fbd1042f
>QABMDF+Helvetica AddT42Char 
QABMDF+Helvetica /CharStrings get begin
/space 3 def
/period 17 def
/seven 26 def
/eight 27 def
/C 38 def
/W 58 def
/a 68 def
/h 75 def
/l 79 def
/m 80 def
/t 87 def
/u 88 def
/v 89 def
end
QABMDF+Helvetica /Encoding get
dup 32 /space put
dup 46 /period put
dup 55 /seven put
dup 56 /eight put
dup 67 /C put
dup 87 /W put
dup 97 /a put
dup 104 /h put
dup 108 /l put
dup 109 /m put
dup 116 /t put
dup 117 /u put
dup 118 /v put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QABMDF+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven /eight 10{/.notdef}rp /C 12{/.notdef}rp /P 6{/.notdef}rp /W 9{/.notdef}rp /a 2{/.notdef}rp /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /.notdef /o 2{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]QABMDF+Helvetica nfQABMDF+Helvetica*1 [16 0 0 -16 0 0 ]msf27.1378 191 mo(1.00000)[8.896 4.448 8.896 8.896 8.89599 8.896 0 ]xshQABMDF+Helvetica*1 [12.8 0 0 -12.8 0 0 ]msf85.1378 183 mo(507)[7.11679 7.1168 0 ]xshQABMDF+Helvetica*1 [16 0 0 -16 0 0 ]msf27.1378 133 mo(1.00080)[8.896 4.448 8.896 8.896 8.89599 8.896 0 ]xshQABMDF+Helvetica*1 [12.8 0 0 -12.8 0 0 ]msf85.1378 125 mo(507)[7.11679 7.1168 0 ]xshQABMDF+Helvetica*1 [16 0 0 -16 0 0 ]msf27.1378 75 mo(1.00137)[8.896 4.448 8.896 8.896 8.89599 8.896 0 ]xshQABMDF+Helvetica*1 [12.8 0 0 -12.8 0 0 ]msf85.1378 67 mo(507)[7.11679 7.1168 0 ]xshQABMDF+Helvetica*1 [-7.7e-07 -17.6 -17.6 7.7e-07 0 0 ]msf19.9378 197.75 mo(Cumulative Wealth)[-12.7069 -9.7856 -14.6607 -9.7856 -3.90694 -9.7856 -4.89279 -3.90694 -8.8 -9.7856 -4.89279 -16.6141 -9.78559 -9.78559 -3.90694 -4.89281 0 ]ysh.8 lw
0 lc
112.638 181.537 mo
113.475 183.779 li
114.312 182.574 li
115.149 180.788 li
115.986 179.149 li
116.823 175.371 li
117.66 176.746 li
118.496 174.48 li
119.333 171.806 li
120.17 168.056 li
121.007 173.302 li
121.844 168.863 li
122.681 167.249 li
123.518 166.045 li
124.355 167.104 li
125.192 167.706 li
126.029 166.419 li
126.866 166.593 li
127.703 166.84 li
128.54 165.27 li
129.377 167.137 li
130.214 165.793 li
131.051 164.2 li
131.888 165.262 li
132.725 165.921 li
133.562 165.185 li
134.399 167.27 li
135.236 165.872 li
136.073 165.632 li
136.91 165.088 li
137.746 165.86 li
138.583 171.704 li
139.42 172.815 li
140.257 173.371 li
141.094 172.815 li
141.931 173.795 li
142.768 174.383 li
143.605 174.567 li
144.442 170.571 li
145.279 168.951 li
146.116 170.707 li
146.953 169.799 li
147.79 168.917 li
148.627 168.547 li
149.464 167.694 li
150.301 171.815 li
151.138 167.84 li
151.975 168.62 li
152.812 166.19 li
153.649 169.26 li
154.486 166.294 li
155.323 172.866 li
156.16 170.351 li
156.996 170.924 li
157.833 165.991 li
158.67 162.56 li
159.507 160.319 li
160.344 157.448 li
161.181 158.605 li
162.018 159.366 li
162.855 160.919 li
163.692 163.355 li
164.529 163.188 li
165.366 153.074 li
166.203 156.683 li
167.04 156.621 li
167.877 151.014 li
168.714 150.592 li
169.551 150.863 li
170.388 149.12 li
171.225 150.014 li
172.062 132.01 li
172.899 133.014 li
173.736 136.49 li
174.573 135.595 li
175.41 134.404 li
176.246 126.205 li
177.083 127.726 li
177.92 121.717 li
178.757 121.717 li
179.594 118.046 li
180.431 115.2 li
181.268 117.195 li
182.105 115.264 li
182.942 112.556 li
183.779 113.36 li
184.616 112.444 li
185.453 111.745 li
186.29 116.456 li
187.127 118.79 li
187.964 119.715 li
188.801 114.607 li
189.638 114.341 li
190.475 113.664 li
191.312 110.86 li
192.149 113.324 li
192.986 112.949 li
193.823 110.822 li
194.66 111.243 li
195.496 107.87 li
196.333 108.305 li
197.17 106.283 li
198.007 97.7513 li
198.844 95.6222 li
199.681 94.7363 li
200.518 93.309 li
201.355 97.0851 li
202.192 101.548 li
203.029 101.61 li
203.866 103.763 li
204.703 102.484 li
205.54 119.212 li
206.377 114.025 li
207.214 109.81 li
208.051 110.389 li
208.888 115.285 li
209.725 116.257 li
210.562 117.857 li
211.399 117.943 li
212.236 120.247 li
213.073 121.292 li
213.91 122.444 li
214.746 122.472 li
215.583 125.121 li
216.42 121.802 li
217.257 117.108 li
218.094 121.484 li
218.931 122.145 li
219.768 125.238 li
220.605 123.845 li
221.442 121.173 li
222.279 120.203 li
223.116 117.333 li
223.953 114.69 li
224.79 115.589 li
225.627 114.122 li
226.464 114.69 li
227.301 118.46 li
228.138 119.849 li
228.975 113.968 li
229.812 115.624 li
230.649 114.024 li
231.486 114.643 li
232.323 112.372 li
233.16 107.883 li
233.996 109.727 li
234.833 108.036 li
235.67 110.612 li
236.507 110.716 li
237.344 114.963 li
238.181 114.795 li
239.018 113.534 li
239.855 111.411 li
240.692 111.018 li
241.529 111.902 li
242.366 107.744 li
243.203 109.989 li
244.04 109.389 li
244.877 110.086 li
245.714 106.601 li
246.551 108.901 li
247.388 107.089 li
248.225 107.703 li
249.062 109.027 li
249.899 110.695 li
250.736 113.929 li
251.573 113.686 li
252.41 115.781 li
253.246 119.858 li
254.083 123.147 li
254.92 120.713 li
255.757 121.897 li
256.594 142.622 li
257.431 139.42 li
258.268 141.021 li
259.105 149.626 li
259.942 148.31 li
260.779 146.671 li
261.616 143.191 li
262.453 145.18 li
263.29 148.625 li
264.127 143.729 li
264.964 144.817 li
265.801 146.449 li
266.638 138.403 li
267.475 139.815 li
268.312 137.034 li
269.149 138.324 li
269.986 132.573 li
270.823 126.057 li
271.659 124.402 li
272.496 124.28 li
273.333 125.01 li
274.17 126.263 li
275.007 126.811 li
275.844 129.619 li
276.681 130.54 li
277.518 127.164 li
278.355 134.272 li
279.192 133.105 li
280.029 133.947 li
280.866 133.881 li
281.703 135.464 li
282.54 135.661 li
283.377 137.013 li
284.214 132.084 li
285.051 140.7 li
285.888 135.17 li
286.725 133.887 li
287.562 134.931 li
288.399 133.807 li
289.236 130.171 li
290.073 130.763 li
290.909 128.954 li
291.746 127.343 li
292.583 131.718 li
293.42 130.704 li
294.257 132.24 li
295.094 129.487 li
295.931 131.798 li
296.768 129.487 li
297.605 128.317 li
298.442 130.652 li
299.279 129.523 li
300.116 128.97 li
300.953 122.368 li
301.79 127.174 li
302.627 125.866 li
303.464 125.258 li
304.301 124.649 li
305.138 122.628 li
305.975 121.98 li
306.812 123.718 li
307.649 127.875 li
308.486 128.982 li
309.323 128.695 li
310.159 130.45 li
310.996 128.676 li
311.833 127.649 li
312.67 129.103 li
313.507 131.347 li
314.344 130.62 li
315.181 128.376 li
316.018 128.345 li
316.855 128.564 li
317.692 132.385 li
318.529 132.821 li
319.366 132.603 li
320.203 134.35 li
321.04 137.807 li
321.877 134.423 li
322.714 134.634 li
323.551 132.278 li
324.388 133.024 li
325.225 134.965 li
326.062 138.098 li
326.899 143.703 li
327.736 143.505 li
328.573 142.713 li
329.409 142.219 li
330.246 139.918 li
331.083 139.161 li
331.92 138.644 li
332.757 135.653 li
333.594 142.492 li
334.431 139.436 li
335.268 136.44 li
336.105 129.639 li
336.942 135.104 li
337.779 140.364 li
338.616 138.929 li
339.453 136.777 li
340.29 133.871 li
341.127 131.279 li
341.964 130.651 li
342.801 129.395 li
343.638 129.541 li
344.475 130.123 li
345.312 134.704 li
346.149 130.049 li
346.986 133.443 li
347.823 133.264 li
348.659 127.904 li
349.496 128.79 li
350.333 129.269 li
351.17 134.21 li
352.007 125.25 li
352.844 126.136 li
353.681 131.587 li
354.518 128.861 li
355.355 129.543 li
356.192 128.993 li
357.029 129.337 li
357.866 127.407 li
358.703 133.013 li
359.54 134.27 li
360.377 131.654 li
361.214 130.579 li
362.051 131.264 li
362.888 131.894 li
363.725 131.95 li
364.562 130.744 li
365.399 130.744 li
366.236 129.951 li
367.073 129.807 li
367.909 128.633 li
368.746 129.06 li
369.583 127.434 li
370.42 128.061 li
371.257 127.824 li
372.094 128.971 li
372.931 126.301 li
373.768 125.873 li
374.605 124.229 li
375.442 130.47 li
376.279 128.644 li
377.116 134.261 li
377.953 130.131 li
378.79 128.314 li
379.627 132.406 li
380.464 134.734 li
381.301 133.778 li
382.138 135.346 li
382.975 134.347 li
383.812 133.185 li
384.649 133.307 li
385.486 131.781 li
386.323 131.04 li
387.159 126.409 li
387.996 125.777 li
388.833 128.223 li
389.67 131.491 li
390.507 129.941 li
391.344 118.086 li
392.181 117.149 li
393.018 122.008 li
393.855 115.811 li
394.692 112.885 li
395.529 113.352 li
396.366 111.725 li
397.203 111.923 li
398.04 107.562 li
398.877 110.944 li
399.714 112.805 li
400.551 116.67 li
401.388 115.181 li
402.225 120.563 li
403.062 122.252 li
403.899 122.643 li
404.736 122.643 li
405.573 121.471 li
406.409 123.349 li
407.246 122.355 li
408.083 123.791 li
408.92 125.153 li
409.757 129.986 li
410.594 134.404 li
411.431 127.336 li
412.268 129.779 li
413.105 129.656 li
413.942 122.815 li
414.779 121.961 li
415.616 132.261 li
416.453 136.798 li
417.29 139.52 li
418.127 136.317 li
418.964 135.068 li
419.801 136.209 li
420.638 141.097 li
421.475 139.238 li
422.312 136.301 li
423.149 136.728 li
423.986 134.323 li
424.823 128.093 li
425.659 127.218 li
426.496 130.495 li
427.333 137.474 li
428.17 128.735 li
429.007 136.882 li
429.844 133.673 li
430.681 131.768 li
431.518 130.569 li
432.355 132.015 li
433.192 136.593 li
434.029 134.921 li
434.866 137.802 li
435.703 121.496 li
436.54 121.257 li
437.377 116.911 li
438.214 101.211 li
439.051 102.461 li
439.888 97.6364 li
440.725 101.622 li
441.562 101.786 li
442.399 111.139 li
443.236 110.15 li
444.073 114.467 li
444.909 109.071 li
445.746 107.722 li
446.583 106.795 li
447.42 107.839 li
448.257 105.093 li
449.094 100.878 li
449.931 102.023 li
450.768 97.4886 li
451.605 100.027 li
452.442 97.8609 li
453.279 101.539 li
454.116 106.98 li
454.953 105.217 li
455.79 104.314 li
456.627 106.989 li
457.464 104.628 li
458.301 102.388 li
459.138 111.364 li
459.975 107.397 li
460.812 111.757 li
461.649 102.374 li
462.486 101.796 li
463.323 102.759 li
464.159 103.763 li
464.996 104.62 li
465.833 104.436 li
466.67 98.1878 li
467.507 98.8184 li
468.344 101.914 li
469.181 108.162 li
470.018 107.426 li
470.855 105.881 li
471.692 113.513 li
472.529 106.64 li
473.366 103.415 li
474.203 110.683 li
475.04 107.485 li
475.877 102.757 li
476.714 106.96 li
477.551 106.907 li
478.388 115.033 li
479.225 113.302 li
480.062 104.764 li
480.899 115.148 li
481.736 106.688 li
482.573 99.872 li
483.409 95.0436 li
484.246 80.1046 li
485.083 79.9637 li
485.92 71.8346 li
486.757 69.1249 li
487.594 57.4614 li
488.431 57.9164 li
489.268 56.4056 li
490.105 57.1638 li
490.942 57.0059 li
491.779 50.7943 li
492.616 43.6208 li
493.453 50.4727 li
494.29 46.408 li
495.127 41.9368 li
495.964 50.2143 li
496.801 42.7715 li
497.638 42.6324 li
498.475 45.1472 li
499.312 48.9207 li
500.149 46.8453 li
500.986 38.8188 li
501.823 32.2077 li
502.659 30.3652 li
503.496 33.2373 li
504.333 32.4786 li
505.17 29.9264 li
506.007 26.3824 li
506.844 23.763 li
507.681 23.9941 li
508.518 23.84 li
509.355 25.322 li
510.192 20.2726 li
511.029 23.0061 li
511.866 20.5111 li
512.703 20.0001 li
513.54 30.181 li
514.377 30.6545 li
515.214 36.2185 li
516.051 40.0068 li
516.888 34.9296 li
517.725 34.5911 li
518.562 32.2087 li
519.399 35.3691 li
520.236 30.1813 li
521.073 31.0757 li
521.909 31.4667 li
522.746 35.6375 li
523.583 34.2038 li
524.42 36.8105 li
525.257 38.4994 li
526.094 37.9661 li
526.931 42.2328 li
527.768 41.7842 li
528.605 44.1675 li
529.442 30.118 li
530.279 32.9717 li
531.116 28.7218 li
531.953 32.199 li
532.79 35.0967 li
533.627 32.1024 li
534.464 29.3374 li
535.301 29.6293 li
536.138 26.9683 li
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 .00030518 cmyk
@
112.638 181.537 mo
113.475 183.779 li
114.312 182.574 li
115.149 180.788 li
115.986 179.149 li
116.823 175.371 li
117.66 174.248 li
118.496 171.892 li
119.333 172.685 li
120.17 168.984 li
121.007 174.162 li
121.844 169.781 li
122.681 167.457 li
123.518 166.257 li
124.355 169.228 li
125.192 170.559 li
126.029 169.323 li
126.866 164.862 li
127.703 161.739 li
128.54 160.059 li
129.377 161.908 li
130.214 162.867 li
131.051 161.211 li
131.888 161.136 li
132.725 162.109 li
133.562 161.335 li
134.399 163.054 li
135.236 161.575 li
136.073 157.516 li
136.91 156.158 li
137.746 157.022 li
138.583 154.932 li
139.42 156.318 li
140.257 157.011 li
141.094 158.551 li
141.931 157.82 li
142.768 158.291 li
143.605 158.521 li
144.442 154.415 li
145.279 152.414 li
146.116 151.002 li
146.953 151.707 li
147.79 150.596 li
148.627 150.131 li
149.464 149.055 li
150.301 154.246 li
151.138 149.24 li
151.975 152.808 li
152.812 149.827 li
153.649 153.582 li
154.486 146.113 li
155.323 154.497 li
156.16 151.288 li
156.996 154.119 li
157.833 147.976 li
158.67 147.641 li
159.507 144.966 li
160.344 141.538 li
161.181 142.919 li
162.018 143.828 li
162.855 144.809 li
163.692 149.726 li
164.529 149.529 li
165.366 137.605 li
166.203 142.405 li
167.04 142.354 li
167.877 135.781 li
168.714 135.286 li
169.551 135.337 li
170.388 133.288 li
171.225 132.877 li
172.062 123.84 li
172.899 120.759 li
173.736 126.486 li
174.573 125.504 li
175.41 129.003 li
176.246 120.383 li
177.083 124.441 li
177.92 122.629 li
178.757 122.629 li
179.594 118.986 li
180.431 116.768 li
181.268 117.335 li
182.105 116.759 li
182.942 117.001 li
183.779 117.776 li
184.616 116.892 li
185.453 116.218 li
186.29 120.764 li
187.127 123.016 li
187.964 123.908 li
188.801 118.979 li
189.638 118.723 li
190.475 118.07 li
191.312 116.821 li
192.149 118.849 li
192.986 117.847 li
193.823 115.802 li
194.66 116.208 li
195.496 115.818 li
196.333 116.227 li
197.17 114.327 li
198.007 107.216 li
198.844 109.353 li
199.681 108.552 li
200.518 107.261 li
201.355 110.676 li
202.192 114.713 li
203.029 114.77 li
203.866 119.675 li
204.703 123.01 li
205.54 137.232 li
206.377 132.822 li
207.214 129.239 li
208.051 129.731 li
208.888 129.046 li
209.725 131.947 li
210.562 133.344 li
211.399 133.813 li
212.236 135.817 li
213.073 136.711 li
213.91 134.53 li
214.746 135.793 li
215.583 134.371 li
216.42 131.32 li
217.257 127.006 li
218.094 131.028 li
218.931 129.754 li
219.768 132.646 li
220.605 130.903 li
221.442 128.394 li
222.279 127.484 li
223.116 125.909 li
223.953 123.452 li
224.79 119.004 li
225.627 118.922 li
226.464 116.952 li
227.301 120.654 li
228.138 122.017 li
228.975 116.244 li
229.812 116.384 li
230.649 114.794 li
231.486 115.41 li
232.323 111.832 li
233.16 112.321 li
233.996 114.043 li
234.833 112.408 li
235.67 112.408 li
236.507 108.171 li
237.344 110.204 li
238.181 110.029 li
239.018 110.029 li
239.855 112.57 li
240.692 112.181 li
241.529 113.056 li
242.366 111.36 li
243.203 113.543 li
244.04 112.96 li
244.877 113.638 li
245.714 110.249 li
246.551 113.53 li
247.388 107.288 li
248.225 107.9 li
249.062 109.222 li
249.899 113.069 li
250.736 115.854 li
251.573 115.615 li
252.41 117.678 li
253.246 121.693 li
254.083 124.93 li
254.92 122.535 li
255.757 123.677 li
256.594 144.088 li
257.431 143.482 li
258.268 145.874 li
259.105 145.154 li
259.942 145.896 li
260.779 144.214 li
261.616 140.641 li
262.453 139.217 li
263.29 136.567 li
264.127 131.02 li
264.964 133.302 li
265.801 127.239 li
266.638 119.566 li
267.475 119.732 li
268.312 116.39 li
269.149 117.941 li
269.986 111.878 li
270.823 109.656 li
271.659 107.762 li
272.496 107.396 li
273.333 108.233 li
274.17 109.67 li
275.007 110.298 li
275.844 113.518 li
276.681 113.936 li
277.518 110.046 li
278.355 118.237 li
279.192 116.893 li
280.029 114.578 li
280.866 114.5 li
281.703 116.373 li
282.54 119.632 li
283.377 129.246 li
284.214 123.943 li
285.051 133.212 li
285.888 127.263 li
286.725 127.035 li
287.562 128.109 li
288.399 125.817 li
289.236 124.565 li
290.073 125.187 li
290.909 123.286 li
291.746 123.162 li
292.583 127.7 li
293.42 126.648 li
294.257 128.241 li
295.094 125.386 li
295.931 127.783 li
296.768 125.386 li
297.605 127.138 li
298.442 129.497 li
299.279 128.356 li
300.116 126.696 li
300.953 126.681 li
301.79 131.31 li
302.627 130.05 li
303.464 129.464 li
304.301 131.042 li
305.138 129.133 li
305.975 128.521 li
306.812 130.162 li
307.649 134.088 li
308.486 135.133 li
309.323 134.863 li
310.159 134.137 li
310.996 132.306 li
311.833 131.313 li
312.67 132.719 li
313.507 134.89 li
314.344 134.187 li
315.181 132.016 li
316.018 130.956 li
316.855 129.688 li
317.692 129.734 li
318.529 130.182 li
319.366 129.958 li
320.203 131.748 li
321.04 135.291 li
321.877 131.823 li
322.714 131.578 li
323.551 130.645 li
324.388 131.403 li
325.225 131.721 li
326.062 134.951 li
326.899 140.73 li
327.736 140.526 li
328.573 139.71 li
329.409 142.185 li
330.246 139.883 li
331.083 139.126 li
331.92 138.609 li
332.757 135.617 li
333.594 142.459 li
334.431 139.401 li
335.268 137.967 li
336.105 131.267 li
336.942 136.651 li
337.779 141.833 li
338.616 140.42 li
339.453 138.515 li
340.29 137.858 li
341.127 135.365 li
341.964 134.761 li
342.801 132.512 li
343.638 132.653 li
344.475 133.219 li
345.312 137.671 li
346.149 133.147 li
346.986 136.284 li
347.823 136.109 li
348.659 130.893 li
349.496 131.233 li
350.333 131.673 li
351.17 130.889 li
352.007 121.646 li
352.844 122.56 li
353.681 128.184 li
354.518 125.372 li
355.355 123.873 li
356.192 123.277 li
357.029 123.368 li
357.866 121.334 li
358.703 122.166 li
359.54 123.551 li
360.377 120.668 li
361.214 121.749 li
362.051 122.49 li
362.888 123.171 li
363.725 121.189 li
364.562 119.862 li
365.399 121.588 li
366.236 120.419 li
367.073 118.061 li
367.909 116.874 li
368.746 119.428 li
369.583 120.698 li
370.42 122.709 li
371.257 122.46 li
372.094 121.432 li
372.931 133.377 li
373.768 132.976 li
374.605 131.435 li
375.442 140.052 li
376.279 137.579 li
377.116 142.742 li
377.953 138.946 li
378.79 140.454 li
379.627 144.099 li
380.464 146.173 li
381.301 145.322 li
382.138 146.452 li
382.975 145.56 li
383.812 144.521 li
384.649 144.63 li
385.486 143.267 li
386.323 142.598 li
387.159 138.46 li
387.996 137.896 li
388.833 142.021 li
389.67 144.883 li
390.507 144.26 li
391.344 136.854 li
392.181 136.062 li
393.018 136.285 li
393.855 133.631 li
394.692 134.797 li
395.529 132.937 li
396.366 131.252 li
397.203 131.42 li
398.04 127.726 li
398.877 130.332 li
399.714 131.912 li
400.551 135.194 li
401.388 133.93 li
402.225 135.298 li
403.062 136.777 li
403.899 137.119 li
404.736 135.798 li
405.573 139.6 li
406.409 141.189 li
407.246 140.348 li
408.083 140.704 li
408.92 141.627 li
409.757 145.764 li
410.594 149.545 li
411.431 143.495 li
412.268 139.548 li
413.105 139.437 li
413.942 135.325 li
414.779 132.268 li
415.616 132.431 li
416.453 136.96 li
417.29 139.677 li
418.127 136.48 li
418.964 141.229 li
419.801 144.501 li
420.638 148.997 li
421.475 147.287 li
422.312 144.585 li
423.149 142.5 li
423.986 135.593 li
424.823 129.662 li
425.659 129.306 li
426.496 131.28 li
427.333 136.436 li
428.17 142.169 li
429.007 149.328 li
429.844 146.508 li
430.681 144.834 li
431.518 147.927 li
432.355 149.262 li
433.192 153.105 li
434.029 151.702 li
434.866 151.689 li
435.703 140.652 li
436.54 140.452 li
437.377 133.282 li
438.214 125.636 li
439.051 126.666 li
439.888 127.018 li
440.725 128.038 li
441.562 130.047 li
442.399 137.481 li
443.236 136.695 li
444.073 140.126 li
444.909 135.837 li
445.746 133.379 li
446.583 132.633 li
447.42 133.474 li
448.257 135.764 li
449.094 132.92 li
449.931 133.8 li
450.768 130.764 li
451.605 132.741 li
452.442 132.358 li
453.279 129.769 li
454.116 134.097 li
454.953 133.099 li
455.79 136.804 li
456.627 138.836 li
457.464 136.418 li
458.301 134.706 li
459.138 141.566 li
459.975 138.534 li
460.812 141.866 li
461.649 134.695 li
462.486 136.097 li
463.323 138.026 li
464.159 138.771 li
464.996 139.406 li
465.833 139.27 li
466.67 134.634 li
467.507 135.101 li
468.344 139.241 li
469.181 140.953 li
470.018 142.291 li
470.855 143.127 li
471.692 147.867 li
472.529 147.146 li
473.366 144.904 li
474.203 145.375 li
475.04 144.433 li
475.877 141.028 li
476.714 146.365 li
477.551 146.328 li
478.388 145.021 li
479.225 143.707 li
480.062 137.226 li
480.899 145.108 li
481.736 138.687 li
482.573 133.513 li
483.409 131.401 li
484.246 127.608 li
485.083 127.509 li
485.92 121.803 li
486.757 120.547 li
487.594 115.507 li
488.431 118.285 li
489.268 118.458 li
490.105 118.959 li
490.942 116.849 li
491.779 112.674 li
492.616 108.763 li
493.453 109.678 li
494.29 106.887 li
495.127 104.41 li
495.964 110.07 li
496.801 104.981 li
497.638 104.886 li
498.475 106.606 li
499.312 109.186 li
500.149 107.767 li
500.986 102.278 li
501.823 97.7581 li
502.659 96.4983 li
503.496 95.1401 li
504.333 99.2765 li
505.17 97.5479 li
506.007 95.1475 li
506.844 93.3733 li
507.681 93.5298 li
508.518 93.4255 li
509.355 93.5056 li
510.192 90.0639 li
511.029 91.9271 li
511.866 90.2264 li
512.703 89.8781 li
513.54 96.8176 li
514.377 97.1404 li
515.214 99.0173 li
516.051 106.75 li
516.888 103.372 li
517.725 99.8136 li
518.562 98.1895 li
519.399 100.344 li
520.236 96.8075 li
521.073 99.3347 li
521.909 99.5976 li
522.746 102.402 li
523.583 94.3773 li
524.42 96.598 li
525.257 97.7887 li
526.094 97.4127 li
526.931 100.765 li
527.768 100.45 li
528.605 102.126 li
529.442 92.2454 li
530.279 94.2523 li
531.116 91.2635 li
531.953 93.7089 li
532.79 95.7468 li
533.627 91.4709 li
534.464 89.4974 li
535.301 89.7057 li
536.138 85.2791 li
.208591 .855558 0 0 cmyk
@
112.638 181.537 mo
113.475 183.072 li
114.312 181.853 li
115.149 180.044 li
115.986 178.384 li
116.823 174.558 li
117.66 174.304 li
118.496 171.95 li
119.333 173.406 li
120.17 169.745 li
121.007 174.867 li
121.844 170.533 li
122.681 168.235 li
123.518 167.047 li
124.355 169.986 li
125.192 171.303 li
126.029 170.08 li
126.866 165.668 li
127.703 162.578 li
128.54 160.916 li
129.377 162.893 li
130.214 165.039 li
131.051 163.43 li
131.888 163.357 li
132.725 164.303 li
133.562 163.551 li
134.399 164.802 li
135.236 163.357 li
136.073 159.392 li
136.91 157.99 li
137.746 158.835 li
138.583 156.791 li
139.42 158.146 li
140.257 158.824 li
141.094 158.986 li
141.931 158.258 li
142.768 158.726 li
143.605 158.955 li
144.442 153.997 li
145.279 151.987 li
146.116 150.346 li
146.953 149.825 li
147.79 148.69 li
148.627 148.214 li
149.464 147.116 li
150.301 152.418 li
151.138 147.304 li
151.975 151.97 li
152.812 153.278 li
153.649 156.889 li
154.486 153.15 li
155.323 160.903 li
156.16 157.936 li
156.996 160.553 li
157.833 154.873 li
158.67 154.564 li
159.507 152.09 li
160.344 148.92 li
161.181 150.198 li
162.018 151.038 li
162.855 152.752 li
163.692 157.257 li
164.529 157.077 li
165.366 146.153 li
166.203 150.05 li
167.04 151.298 li
167.877 145.331 li
168.714 144.882 li
169.551 144.928 li
170.388 143.068 li
171.225 142.694 li
172.062 133.992 li
172.899 131.181 li
173.736 136.912 li
174.573 136.021 li
175.41 134.834 li
176.246 126.669 li
177.083 128.185 li
177.92 126.432 li
178.757 126.432 li
179.594 122.908 li
180.431 120.236 li
181.268 120.788 li
182.105 120.228 li
182.942 120.45 li
183.779 121.204 li
184.616 120.345 li
185.453 119.689 li
186.29 124.108 li
187.127 126.296 li
187.964 127.164 li
188.801 122.373 li
189.638 122.124 li
190.475 121.489 li
191.312 118.859 li
192.149 120.853 li
192.986 119.925 li
193.823 117.915 li
194.66 118.314 li
195.496 117.931 li
196.333 118.332 li
197.17 116.465 li
198.007 116.54 li
198.844 118.526 li
199.681 117.781 li
200.518 116.581 li
201.355 119.756 li
202.192 123.508 li
203.029 123.561 li
203.866 128.121 li
204.703 131.22 li
205.54 144.439 li
206.377 140.34 li
207.214 137.01 li
208.051 137.468 li
208.888 134.331 li
209.725 136.946 li
210.562 138.278 li
211.399 138.725 li
212.236 140.636 li
213.073 141.502 li
213.91 138.906 li
214.746 140.117 li
215.583 142.367 li
216.42 139.548 li
217.257 135.562 li
218.094 139.278 li
218.931 138.101 li
219.768 140.773 li
220.605 139.077 li
221.442 136.757 li
222.279 135.915 li
223.116 133.422 li
223.953 131.127 li
224.79 126.973 li
225.627 127.275 li
226.464 125.441 li
227.301 128.887 li
228.138 130.156 li
228.975 124.782 li
229.812 124.913 li
230.649 123.433 li
231.486 124.006 li
232.323 121.906 li
233.16 122.356 li
233.996 123.998 li
234.833 122.493 li
235.67 122.493 li
236.507 122.265 li
237.344 124.08 li
238.181 123.924 li
239.018 122.755 li
239.855 123.882 li
240.692 123.527 li
241.529 124.325 li
242.366 122.865 li
243.203 124.852 li
244.04 124.321 li
244.877 124.938 li
245.714 121.853 li
246.551 124.84 li
247.388 119.158 li
248.225 119.716 li
249.062 120.777 li
249.899 124.283 li
250.736 126.821 li
251.573 126.603 li
252.41 128.483 li
253.246 132.142 li
254.083 135.092 li
254.92 132.909 li
255.757 133.95 li
256.594 152.55 li
257.431 149.677 li
258.268 151.113 li
259.105 154.902 li
259.942 150.936 li
260.779 149.345 li
261.616 145.965 li
262.453 144.617 li
263.29 142.109 li
264.127 136.862 li
264.964 139.021 li
265.801 133.284 li
266.638 124.099 li
267.475 125.095 li
268.312 121.903 li
269.149 123.384 li
269.986 121.067 li
270.823 119.005 li
271.659 117.247 li
272.496 116.993 li
273.333 117.77 li
274.17 119.102 li
275.007 119.685 li
275.844 122.671 li
276.681 123.65 li
277.518 120.06 li
278.355 127.618 li
279.192 126.378 li
280.029 124.241 li
280.866 124.169 li
281.703 125.898 li
282.54 133.769 li
283.377 142.249 li
284.214 137.572 li
285.051 145.748 li
285.888 140.5 li
286.725 140.299 li
287.562 141.256 li
288.399 139.234 li
289.236 138.131 li
290.073 138.679 li
290.909 137.002 li
291.746 136.893 li
292.583 140.896 li
293.42 139.968 li
294.257 141.373 li
295.094 138.854 li
295.931 140.969 li
296.768 138.854 li
297.605 140.399 li
298.442 142.48 li
299.279 141.474 li
300.116 140.01 li
300.953 141.1 li
301.79 145.137 li
302.627 144.039 li
303.464 143.527 li
304.301 145.104 li
305.138 143.443 li
305.975 142.91 li
306.812 144.339 li
307.649 147.756 li
308.486 148.665 li
309.323 148.43 li
310.159 147.298 li
310.996 146.099 li
311.833 145.234 li
312.67 146.459 li
313.507 148.351 li
314.344 147.738 li
315.181 145.847 li
316.018 144.923 li
316.855 143.818 li
317.692 143.858 li
318.529 144.248 li
319.366 144.053 li
320.203 144.435 li
321.04 147.56 li
321.877 144.5 li
322.714 144.692 li
323.551 143.872 li
324.388 144.538 li
325.225 144.818 li
326.062 147.655 li
326.899 152.731 li
327.736 152.552 li
328.573 151.835 li
329.409 154.01 li
330.246 151.988 li
331.083 151.323 li
331.92 150.869 li
332.757 148.24 li
333.594 154.25 li
334.431 151.564 li
335.268 150.305 li
336.105 144.419 li
336.942 149.148 li
337.779 149.315 li
338.616 148.01 li
339.453 146.251 li
340.29 145.645 li
341.127 143.342 li
341.964 142.784 li
342.801 139.795 li
343.638 139.926 li
344.475 140.454 li
345.312 144.602 li
346.149 140.387 li
346.986 143.31 li
347.823 143.147 li
348.659 138.286 li
349.496 139.47 li
350.333 139.918 li
351.17 139.194 li
352.007 130.658 li
352.844 131.502 li
353.681 136.695 li
354.518 134.099 li
355.355 132.714 li
356.192 132.74 li
357.029 132.823 li
357.866 130.955 li
358.703 131.719 li
359.54 132.991 li
360.377 130.343 li
361.214 130.215 li
362.051 130.903 li
362.888 131.535 li
363.725 129.695 li
364.562 128.464 li
365.399 130.066 li
366.236 128.149 li
367.073 128.003 li
367.909 126.809 li
368.746 129.157 li
369.583 130.324 li
370.42 132.172 li
371.257 131.943 li
372.094 133.048 li
372.931 143.817 li
373.768 143.456 li
374.605 142.066 li
375.442 147.341 li
376.279 145.05 li
377.116 149.835 li
377.953 146.316 li
378.79 147.538 li
379.627 150.923 li
380.464 152.848 li
381.301 152.057 li
382.138 153.107 li
382.975 152.278 li
383.812 151.315 li
384.649 151.415 li
385.486 150.15 li
386.323 149.529 li
387.159 145.687 li
387.996 145.163 li
388.833 148.202 li
389.67 150.883 li
390.507 150.3 li
391.344 143.363 li
392.181 142.622 li
393.018 143.606 li
393.855 142.98 li
394.692 140.697 li
395.529 138.941 li
396.366 137.348 li
397.203 137.507 li
398.04 134.02 li
398.877 136.48 li
399.714 137.972 li
400.551 141.068 li
401.388 139.876 li
402.225 144.188 li
403.062 145.542 li
403.899 145.855 li
404.736 145.855 li
405.573 149.288 li
406.409 150.723 li
407.246 149.963 li
408.083 151.312 li
408.92 152.136 li
409.757 155.828 li
410.594 159.203 li
411.431 153.803 li
412.268 150.28 li
413.105 150.18 li
413.942 144.618 li
414.779 141.833 li
415.616 141.989 li
416.453 146.114 li
417.29 148.589 li
418.127 145.677 li
418.964 150.002 li
419.801 152.982 li
420.638 157.076 li
421.475 155.519 li
422.312 153.059 li
423.149 151.159 li
423.986 144.869 li
424.823 139.468 li
425.659 139.252 li
426.496 141.137 li
427.333 145.823 li
428.17 151.034 li
429.007 157.541 li
429.844 154.978 li
430.681 153.457 li
431.518 156.268 li
432.355 157.372 li
433.192 160.87 li
434.029 159.593 li
434.866 161.794 li
435.703 150.963 li
436.54 150.783 li
437.377 144.126 li
438.214 137.261 li
439.051 138.185 li
439.888 138.502 li
440.725 140.666 li
441.562 140.784 li
442.399 147.488 li
443.236 146.779 li
444.073 149.873 li
444.909 146.005 li
445.746 144.925 li
446.583 144.26 li
447.42 145.009 li
448.257 147.242 li
449.094 144.35 li
449.931 145.135 li
450.768 142.425 li
451.605 144.236 li
452.442 142.757 li
453.279 140.419 li
454.116 144.327 li
454.953 143.061 li
455.79 142.412 li
456.627 144.333 li
457.464 142.047 li
458.301 140.428 li
459.138 146.914 li
459.975 144.048 li
460.812 148.131 li
461.649 146.316 li
462.486 145.924 li
463.323 147.669 li
464.159 148.343 li
464.996 148.918 li
465.833 148.795 li
466.67 144.599 li
467.507 145.022 li
468.344 148.769 li
469.181 150.317 li
470.018 149.818 li
470.855 150.386 li
471.692 154.769 li
472.529 151.639 li
473.366 149.507 li
474.203 149.954 li
475.04 147.732 li
475.877 144.445 li
476.714 149.597 li
477.551 149.561 li
478.388 148.299 li
479.225 147.031 li
480.062 140.775 li
480.899 148.383 li
481.736 142.185 li
482.573 137.191 li
483.409 135.152 li
484.246 131.491 li
485.083 131.395 li
485.92 125.887 li
486.757 124.674 li
487.594 120.69 li
488.431 121.359 li
489.268 121.527 li
490.105 122.016 li
490.942 119.959 li
491.779 115.891 li
492.616 111.573 li
493.453 116.047 li
494.29 113.393 li
495.127 111.038 li
495.964 116.42 li
496.801 111.581 li
497.638 111.491 li
498.475 113.126 li
499.312 115.579 li
500.149 114.23 li
500.986 109.011 li
501.823 104.712 li
502.659 103.514 li
503.496 102.223 li
504.333 106.156 li
505.17 104.513 li
506.007 102.23 li
506.844 100.543 li
507.681 100.692 li
508.518 100.592 li
509.355 101.818 li
510.192 98.5727 li
511.029 100.053 li
511.866 98.446 li
512.703 98.1168 li
513.54 104.674 li
514.377 104.979 li
515.214 106.753 li
516.051 114.06 li
516.888 110.867 li
517.725 106.667 li
518.562 105.123 li
519.399 107.171 li
520.236 103.808 li
521.073 106.212 li
521.909 106.462 li
522.746 109.129 li
523.583 101.497 li
524.42 103.609 li
525.257 104.741 li
526.094 104.384 li
526.931 107.572 li
527.768 107.272 li
528.605 108.866 li
529.442 99.4701 li
530.279 101.379 li
531.116 98.5364 li
531.953 100.862 li
532.79 102.8 li
533.627 98.7336 li
534.464 96.857 li
535.301 97.0551 li
536.138 92.8456 li
.887724 .768978 0 0 cmyk
@
112.638 181.537 mo
113.475 182.59 li
114.312 181.197 li
115.149 183.029 li
115.986 182.79 li
116.823 183.596 li
117.66 182.84 li
118.496 182.355 li
119.333 182.363 li
120.17 183.153 li
121.007 186.481 li
121.844 182.926 li
122.681 181.638 li
123.518 181.064 li
124.355 183.356 li
125.192 184.419 li
126.029 183.68 li
126.866 181.805 li
127.703 181.636 li
128.54 180.437 li
129.377 180.242 li
130.214 181.158 li
131.051 179.897 li
131.888 179.971 li
132.725 180.144 li
133.562 181.55 li
134.399 180.789 li
135.236 180.133 li
136.073 177.041 li
136.91 176.419 li
137.746 176.942 li
138.583 181.907 li
139.42 182.851 li
140.257 183.88 li
141.094 184.584 li
141.931 183.923 li
142.768 184.42 li
143.605 183.999 li
144.442 186.316 li
145.279 185.066 li
146.116 184.259 li
146.953 184.603 li
147.79 185.376 li
148.627 184.704 li
149.464 187.081 li
150.301 190.158 li
151.138 187.174 li
151.975 187.721 li
152.812 185.952 li
153.649 187.594 li
154.486 183.597 li
155.323 188.042 li
156.16 186.099 li
156.996 186.526 li
157.833 183.81 li
158.67 182.498 li
159.507 182.673 li
160.344 180.612 li
161.181 181.218 li
162.018 180.757 li
162.855 181.264 li
163.692 184.288 li
164.529 184.732 li
165.366 177.474 li
166.203 177.439 li
167.04 178.295 li
167.877 175.91 li
168.714 175.97 li
169.551 175.885 li
170.388 175.648 li
171.225 176.279 li
172.062 169.607 li
172.899 169.25 li
173.736 171.181 li
174.573 170.587 li
175.41 173.274 li
176.246 172.397 li
177.083 173.119 li
177.92 172.074 li
178.757 171.475 li
179.594 170.25 li
180.431 170.253 li
181.268 171.089 li
182.105 170.032 li
182.942 169.861 li
183.779 171.694 li
184.616 171.538 li
185.453 173.626 li
186.29 176.055 li
187.127 177.258 li
187.964 177.735 li
188.801 178.151 li
189.638 178.02 li
190.475 177.552 li
191.312 175.725 li
192.149 176.832 li
192.986 177.259 li
193.823 177.524 li
194.66 177.727 li
195.496 177.892 li
196.333 180.039 li
197.17 179.117 li
198.007 179.623 li
198.844 180.239 li
199.681 179.875 li
200.518 181.915 li
201.355 182.477 li
202.192 183.837 li
203.029 185.24 li
203.866 187.374 li
204.703 188.824 li
205.54 193.614 li
206.377 191.635 li
207.214 191.782 li
208.051 192.063 li
208.888 192.697 li
209.725 193.36 li
210.562 193.889 li
211.399 194.091 li
212.236 194.328 li
213.073 194.633 li
213.91 193.445 li
214.746 193.999 li
215.583 195.029 li
216.42 193.864 li
217.257 194.595 li
218.094 196.167 li
218.931 196.071 li
219.768 196.257 li
220.605 195.777 li
221.442 194.537 li
222.279 194.412 li
223.116 194.651 li
223.953 194.358 li
224.79 194.247 li
225.627 193.969 li
226.464 193.625 li
227.301 195.01 li
228.138 195.901 li
228.975 193.759 li
229.812 194.542 li
230.649 193.961 li
231.486 193.88 li
232.323 193.605 li
233.16 193.732 li
233.996 193.85 li
234.833 193.894 li
235.67 194.31 li
236.507 193.803 li
237.344 194.365 li
238.181 194.318 li
239.018 193.682 li
239.855 194.392 li
240.692 194.254 li
241.529 195.244 li
242.366 194.539 li
243.203 195.455 li
244.04 195.251 li
244.877 195.488 li
245.714 194.383 li
246.551 194.569 li
247.388 194.229 li
248.225 194.555 li
249.062 194.355 li
249.899 194.956 li
250.736 195.937 li
251.573 195.853 li
252.41 195.601 li
253.246 197.048 li
254.083 198.214 li
254.92 199.698 li
255.757 200.62 li
256.594 206.259 li
257.431 207.49 li
258.268 208.342 li
259.105 210.484 li
259.942 209.976 li
260.779 208.719 li
261.616 208.879 li
262.453 209.053 li
263.29 210.134 li
264.127 208.552 li
264.964 209.33 li
265.801 207.609 li
266.638 205.466 li
267.475 205.737 li
268.312 205.249 li
269.149 205.221 li
269.986 203.815 li
270.823 203.07 li
271.659 202.656 li
272.496 203.281 li
273.333 203.539 li
274.17 203.525 li
275.007 204.504 li
275.844 204.847 li
276.681 205.088 li
277.518 204.31 li
278.355 206.536 li
279.192 206.171 li
280.029 205.894 li
280.866 205.602 li
281.703 206.37 li
282.54 207.076 li
283.377 209.676 li
284.214 208.242 li
285.051 207.01 li
285.888 205.192 li
286.725 205.023 li
287.562 205.334 li
288.399 205.443 li
289.236 204.272 li
290.073 204.462 li
290.909 203.142 li
291.746 203.049 li
292.583 203.872 li
293.42 203.536 li
294.257 202.52 li
295.094 201.991 li
295.931 201.111 li
296.768 200.079 li
297.605 200.684 li
298.442 201.439 li
299.279 201.044 li
300.116 200.524 li
300.953 200.706 li
301.79 201.965 li
302.627 201.528 li
303.464 202.025 li
304.301 202.402 li
305.138 201.686 li
305.975 201.932 li
306.812 202.488 li
307.649 203.817 li
308.486 204.17 li
309.323 203.471 li
310.159 203.472 li
310.996 202.937 li
311.833 202.676 li
312.67 203.154 li
313.507 203.325 li
314.344 203.037 li
315.181 202.99 li
316.018 202.576 li
316.855 202.208 li
317.692 202.381 li
318.529 202.532 li
319.366 202.259 li
320.203 202.494 li
321.04 203.302 li
321.877 202.775 li
322.714 202.586 li
323.551 201.912 li
324.388 202.019 li
325.225 202.2 li
326.062 203.317 li
326.899 205.317 li
327.736 205.246 li
328.573 204.919 li
329.409 205.868 li
330.246 205.441 li
331.083 205.396 li
331.92 205.885 li
332.757 204.889 li
333.594 206.753 li
334.431 205.687 li
335.268 205.219 li
336.105 202.958 li
336.942 204.775 li
337.779 206.2 li
338.616 205.718 li
339.453 205.292 li
340.29 204.77 li
341.127 204.677 li
341.964 204.88 li
342.801 204.3 li
343.638 204.347 li
344.475 206.112 li
345.312 207.51 li
346.149 206.093 li
346.986 205.993 li
347.823 205.936 li
348.659 204.973 li
349.496 205.08 li
350.333 205.229 li
351.17 205.052 li
352.007 203.083 li
352.844 202.527 li
353.681 202.948 li
354.518 202.12 li
355.355 202.471 li
356.192 201.904 li
357.029 201.933 li
357.866 202.313 li
358.703 202.716 li
359.54 203.15 li
360.377 203.449 li
361.214 204.028 li
362.051 204.235 li
362.888 205.397 li
363.725 204.724 li
364.562 204.591 li
365.399 205.134 li
366.236 205.381 li
367.073 205.16 li
367.909 205.08 li
368.746 205.116 li
369.583 205.48 li
370.42 206.055 li
371.257 205.757 li
372.094 205.873 li
372.931 208.211 li
373.768 208.093 li
374.605 207.297 li
375.442 209.864 li
376.279 209.195 li
377.116 209.193 li
377.953 208.004 li
378.79 208.465 li
379.627 209.606 li
380.464 210.192 li
381.301 210.601 li
382.138 210.486 li
382.975 210.731 li
383.812 210.413 li
384.649 210.632 li
385.486 210.499 li
386.323 210.123 li
387.159 209.841 li
387.996 209.548 li
388.833 210.688 li
389.67 211.455 li
390.507 211.266 li
391.344 210.935 li
392.181 210.706 li
393.018 211.758 li
393.855 210.277 li
394.692 210.599 li
395.529 210.125 li
396.366 209.747 li
397.203 209.793 li
398.04 209.387 li
398.877 210.43 li
399.714 210.85 li
400.551 211.724 li
401.388 211.387 li
402.225 211.28 li
403.062 211.68 li
403.899 211.591 li
404.736 211.875 li
405.573 212.757 li
406.409 213.294 li
407.246 212.893 li
408.083 212.665 li
408.92 215.415 li
409.757 216.432 li
410.594 217.362 li
411.431 216.631 li
412.268 216.222 li
413.105 216.179 li
413.942 215.381 li
414.779 214.811 li
415.616 215.831 li
416.453 216.831 li
417.29 217.281 li
418.127 217.219 li
418.964 218.245 li
419.801 218.874 li
420.638 218.844 li
421.475 218.454 li
422.312 218.81 li
423.149 218.984 li
423.986 218.306 li
424.823 217.293 li
425.659 217.038 li
426.496 217.616 li
427.333 218.774 li
428.17 218.943 li
429.007 220.411 li
429.844 219.814 li
430.681 219.806 li
431.518 220.372 li
432.355 220.67 li
433.192 221.057 li
434.029 220.758 li
434.866 222.33 li
435.703 220.354 li
436.54 221.307 li
437.377 219.97 li
438.214 218.5 li
439.051 218.56 li
439.888 218.229 li
440.725 218.742 li
441.562 218.905 li
442.399 220.245 li
443.236 219.723 li
444.073 219.625 li
444.909 218.768 li
445.746 218.177 li
446.583 218.376 li
447.42 218.542 li
448.257 218.858 li
449.094 218.491 li
449.931 218.641 li
450.768 218.03 li
451.605 218.34 li
452.442 218.012 li
453.279 217.698 li
454.116 218.714 li
454.953 218.518 li
455.79 218.855 li
456.627 219.2 li
457.464 219.516 li
458.301 219.59 li
459.138 220.907 li
459.975 220.197 li
460.812 220.256 li
461.649 219.156 li
462.486 218.716 li
463.323 218.926 li
464.159 219.077 li
464.996 219.206 li
465.833 219.001 li
466.67 218.054 li
467.507 218.232 li
468.344 219.075 li
469.181 219.435 li
470.018 219.619 li
470.855 219.431 li
471.692 219.516 li
472.529 218.754 li
473.366 218.199 li
474.203 218.612 li
475.04 218.216 li
475.877 217.19 li
476.714 217.871 li
477.551 218.18 li
478.388 218.672 li
479.225 218.262 li
480.062 217.139 li
480.899 217.893 li
481.736 216.483 li
482.573 216.143 li
483.409 215.577 li
484.246 213.433 li
485.083 214.399 li
485.92 213.675 li
486.757 213.512 li
487.594 212.048 li
488.431 211.997 li
489.268 211.673 li
490.105 211.85 li
490.942 210.961 li
491.779 210.251 li
492.616 209.72 li
493.453 209.317 li
494.29 209.16 li
495.127 207.799 li
495.964 208.375 li
496.801 207.151 li
497.638 206.437 li
498.475 207.52 li
499.312 208.141 li
500.149 209.374 li
500.986 208.119 li
501.823 207.086 li
502.659 206.307 li
503.496 205.992 li
504.333 206.372 li
505.17 206.434 li
506.007 205.735 li
506.844 205.552 li
507.681 205.65 li
508.518 205.031 li
509.355 205.047 li
510.192 203.817 li
511.029 203.814 li
511.866 203.65 li
512.703 203.962 li
513.54 204.501 li
514.377 204.615 li
515.214 204.024 li
516.051 205.149 li
516.888 204.435 li
517.725 203.291 li
518.562 202.264 li
519.399 202.832 li
520.236 201.697 li
521.073 202.055 li
521.909 202.126 li
522.746 202.664 li
523.583 200.509 li
524.42 201.598 li
525.257 201.914 li
526.094 202.408 li
526.931 203.022 li
527.768 202.954 li
528.605 203.383 li
529.442 201.514 li
530.279 202.031 li
531.116 201.26 li
531.953 201.09 li
532.79 201.505 li
533.627 200.375 li
534.464 200.051 li
535.301 200.173 li
536.138 199.771 li
.331762 .928679 0 0 cmyk
@
112.638 181.537 mo
113.475 182.59 li
114.312 181.197 li
115.149 182.888 li
115.986 182.615 li
116.823 183.632 li
117.66 182.901 li
118.496 182.58 li
119.333 182.522 li
120.17 183.615 li
121.007 186.848 li
121.844 183.318 li
122.681 182.05 li
123.518 181.602 li
124.355 183.741 li
125.192 184.187 li
126.029 183.546 li
126.866 181.659 li
127.703 181.629 li
128.54 180.434 li
129.377 180.237 li
130.214 181.189 li
131.051 179.929 li
131.888 180.01 li
132.725 180.225 li
133.562 181.765 li
134.399 180.973 li
135.236 180.426 li
136.073 177.349 li
136.91 176.753 li
137.746 177.251 li
138.583 182.191 li
139.42 183.145 li
140.257 184.322 li
141.094 184.954 li
141.931 184.222 li
142.768 184.756 li
143.605 184.438 li
144.442 186.706 li
145.279 185.485 li
146.116 184.588 li
146.953 184.881 li
147.79 185.742 li
148.627 184.987 li
149.464 187.351 li
150.301 190.421 li
151.138 187.467 li
151.975 187.952 li
152.812 186.19 li
153.649 187.765 li
154.486 183.697 li
155.323 188.01 li
156.16 186.066 li
156.996 186.522 li
157.833 184.118 li
158.67 182.86 li
159.507 182.919 li
160.344 180.868 li
161.181 181.523 li
162.018 180.942 li
162.855 181.463 li
163.692 184.476 li
164.529 185.074 li
165.366 177.861 li
166.203 177.836 li
167.04 178.774 li
167.877 176.656 li
168.714 176.973 li
169.551 176.877 li
170.388 176.672 li
171.225 177.293 li
172.062 171.916 li
172.899 171.587 li
173.736 173.161 li
174.573 172.585 li
175.41 175.213 li
176.246 174.539 li
177.083 175.065 li
177.92 174.063 li
178.757 173.701 li
179.594 172.538 li
180.431 172.601 li
181.268 173.459 li
182.105 172.416 li
182.942 172.343 li
183.779 174.154 li
184.616 174.007 li
185.453 176.02 li
186.29 178.361 li
187.127 179.322 li
187.964 179.783 li
188.801 180.185 li
189.638 180.059 li
190.475 179.605 li
191.312 177.717 li
192.149 178.787 li
192.986 179.161 li
193.823 179.353 li
194.66 179.55 li
195.496 179.716 li
196.333 181.873 li
197.17 180.967 li
198.007 181.482 li
198.844 182.04 li
199.681 181.687 li
200.518 183.665 li
201.355 183.991 li
202.192 185.19 li
203.029 186.661 li
203.866 188.738 li
204.703 190.151 li
205.54 194.529 li
206.377 192.59 li
207.214 192.923 li
208.051 193.201 li
208.888 193.832 li
209.725 194.439 li
210.562 194.949 li
211.399 195.146 li
212.236 195.476 li
213.073 195.779 li
213.91 194.621 li
214.746 195.161 li
215.583 196.164 li
216.42 195.23 li
217.257 195.931 li
218.094 197.448 li
218.931 197.399 li
219.768 197.572 li
220.605 197.086 li
221.442 195.882 li
222.279 195.737 li
223.116 195.755 li
223.953 195.562 li
224.79 195.691 li
225.627 195.389 li
226.464 195.056 li
227.301 196.398 li
228.138 197.335 li
228.975 195.264 li
229.812 196.029 li
230.649 195.468 li
231.486 195.389 li
232.323 195.196 li
233.16 195.359 li
233.996 195.401 li
234.833 195.486 li
235.67 195.853 li
236.507 195.363 li
237.344 195.893 li
238.181 195.844 li
239.018 195.238 li
239.855 195.92 li
240.692 195.787 li
241.529 196.745 li
242.366 196.07 li
243.203 196.967 li
244.04 196.77 li
244.877 196.999 li
245.714 195.955 li
246.551 196.106 li
247.388 195.777 li
248.225 196.121 li
249.062 195.918 li
249.899 196.499 li
250.736 197.446 li
251.573 197.365 li
252.41 197.112 li
253.246 198.509 li
254.083 199.682 li
254.92 201.218 li
255.757 202.147 li
256.594 207.242 li
257.431 208.3 li
258.268 209.215 li
259.105 211.537 li
259.942 211.109 li
260.779 209.98 li
261.616 210.184 li
262.453 210.504 li
263.29 211.543 li
264.127 210.037 li
264.964 210.66 li
265.801 209.024 li
266.638 207.009 li
267.475 207.274 li
268.312 206.96 li
269.149 206.912 li
269.986 205.551 li
270.823 204.855 li
271.659 204.48 li
272.496 205.073 li
273.333 205.409 li
274.17 205.388 li
275.007 206.319 li
275.844 206.615 li
276.681 206.902 li
277.518 206.177 li
278.355 208.285 li
279.192 207.939 li
280.029 207.612 li
280.866 207.208 li
281.703 207.966 li
282.54 208.639 li
283.377 211.113 li
284.214 209.748 li
285.051 208.651 li
285.888 206.925 li
286.725 206.756 li
287.562 207.047 li
288.399 207.738 li
289.236 206.645 li
290.073 206.823 li
290.909 205.596 li
291.746 205.505 li
292.583 206.26 li
293.42 205.947 li
294.257 204.927 li
295.094 204.393 li
295.931 203.518 li
296.768 202.551 li
297.605 203.118 li
298.442 203.775 li
299.279 203.404 li
300.116 202.913 li
300.953 203.07 li
301.79 204.237 li
302.627 203.827 li
303.464 204.303 li
304.301 204.648 li
305.138 203.973 li
305.975 204.185 li
306.812 204.707 li
307.649 205.956 li
308.486 206.289 li
309.323 205.592 li
310.159 205.602 li
310.996 205.105 li
311.833 204.848 li
312.67 205.298 li
313.507 205.51 li
314.344 205.232 li
315.181 205.188 li
316.018 204.789 li
316.855 204.482 li
317.692 204.679 li
318.529 204.821 li
319.366 204.546 li
320.203 204.761 li
321.04 205.507 li
321.877 205.099 li
322.714 204.922 li
323.551 204.311 li
324.388 204.43 li
325.225 204.607 li
326.062 205.652 li
326.899 207.522 li
327.736 207.456 li
328.573 207.147 li
329.409 208.03 li
330.246 207.61 li
331.083 207.61 li
331.92 208.083 li
332.757 207.152 li
333.594 208.777 li
334.431 207.773 li
335.268 207.368 li
336.105 205.248 li
336.942 206.951 li
337.779 208.221 li
338.616 207.768 li
339.453 207.406 li
340.29 206.904 li
341.127 206.884 li
341.964 207.116 li
342.801 206.549 li
343.638 206.593 li
344.475 208.246 li
345.312 209.554 li
346.149 208.208 li
346.986 208.114 li
347.823 208.061 li
348.659 207.158 li
349.496 207.265 li
350.333 207.405 li
351.17 207.215 li
352.007 205.448 li
352.844 204.904 li
353.681 205.205 li
354.518 204.479 li
355.355 204.809 li
356.192 204.251 li
357.029 204.279 li
357.866 204.698 li
358.703 205.077 li
359.54 205.484 li
360.377 205.764 li
361.214 206.306 li
362.051 206.119 li
362.888 207.219 li
363.725 206.556 li
364.562 206.464 li
365.399 206.976 li
366.236 207.211 li
367.073 207.065 li
367.909 207.008 li
368.746 207.042 li
369.583 207.385 li
370.42 207.928 li
371.257 207.647 li
372.094 207.788 li
372.931 209.989 li
373.768 209.878 li
374.605 209.116 li
375.442 211.537 li
376.279 210.995 li
377.116 211.005 li
377.953 209.887 li
378.79 210.317 li
379.627 211.39 li
380.464 211.921 li
381.301 212.389 li
382.138 212.285 li
382.975 212.509 li
383.812 212.211 li
384.649 212.398 li
385.486 212.29 li
386.323 211.92 li
387.159 211.63 li
387.996 211.346 li
388.833 212.408 li
389.67 213.118 li
390.507 212.937 li
391.344 212.593 li
392.181 212.376 li
393.018 213.406 li
393.855 212.014 li
394.692 212.317 li
395.529 211.921 li
396.366 211.566 li
397.203 211.609 li
398.04 211.275 li
398.877 212.254 li
399.714 212.648 li
400.551 213.279 li
401.388 212.961 li
402.225 212.836 li
403.062 213.214 li
403.899 213.119 li
404.736 213.347 li
405.573 214.156 li
406.409 214.712 li
407.246 214.329 li
408.083 214.113 li
408.92 217.05 li
409.757 217.999 li
410.594 218.868 li
411.431 218.179 li
412.268 217.872 li
413.105 217.823 li
413.942 217.086 li
414.779 216.556 li
415.616 217.607 li
416.453 218.533 li
417.29 218.887 li
418.127 218.947 li
418.964 219.894 li
419.801 220.415 li
420.638 220.161 li
421.475 219.796 li
422.312 220.119 li
423.149 220.398 li
423.986 219.739 li
424.823 218.802 li
425.659 218.57 li
426.496 219.153 li
427.333 220.226 li
428.17 220.33 li
429.007 221.638 li
429.844 221.079 li
430.681 221.062 li
431.518 221.592 li
432.355 221.873 li
433.192 222.208 li
434.029 221.927 li
434.866 223.5 li
435.703 221.635 li
436.54 222.542 li
437.377 221.31 li
438.214 220.005 li
439.051 220.06 li
439.888 219.732 li
440.725 220.23 li
441.562 220.308 li
442.399 221.533 li
443.236 220.939 li
444.073 220.696 li
444.909 219.885 li
445.746 219.335 li
446.583 219.497 li
447.42 219.655 li
448.257 219.942 li
449.094 219.587 li
449.931 219.733 li
450.768 219.139 li
451.605 219.413 li
452.442 219.101 li
453.279 218.86 li
454.116 219.825 li
454.953 219.639 li
455.79 219.954 li
456.627 220.242 li
457.464 220.541 li
458.301 220.688 li
459.138 221.932 li
459.975 221.269 li
460.812 221.309 li
461.649 220.287 li
462.486 219.847 li
463.323 219.935 li
464.159 220.078 li
464.996 220.201 li
465.833 220.012 li
466.67 219.111 li
467.507 219.226 li
468.344 220.029 li
469.181 220.422 li
470.018 220.556 li
470.855 220.331 li
471.692 220.374 li
472.529 219.637 li
473.366 219.097 li
474.203 219.394 li
475.04 218.944 li
475.877 217.982 li
476.714 218.588 li
477.551 218.901 li
478.388 219.324 li
479.225 218.906 li
480.062 217.832 li
480.899 218.451 li
481.736 217.175 li
482.573 216.822 li
483.409 216.258 li
484.246 214.095 li
485.083 215.069 li
485.92 214.195 li
486.757 214.046 li
487.594 212.55 li
488.431 212.544 li
489.268 212.215 li
490.105 212.399 li
490.942 211.496 li
491.779 210.74 li
492.616 210.282 li
493.453 209.767 li
494.29 209.685 li
495.127 208.348 li
495.964 208.777 li
496.801 207.569 li
497.638 206.899 li
498.475 207.959 li
499.312 208.547 li
500.149 209.764 li
500.986 208.526 li
501.823 207.506 li
502.659 206.638 li
503.496 206.326 li
504.333 206.71 li
505.17 206.728 li
506.007 206.028 li
506.844 205.715 li
507.681 205.957 li
508.518 205.281 li
509.355 205.275 li
510.192 204.048 li
511.029 204.036 li
511.866 203.889 li
512.703 204.224 li
513.54 204.663 li
514.377 204.785 li
515.214 204.06 li
516.051 205.183 li
516.888 204.38 li
517.725 203.234 li
518.562 202.18 li
519.399 202.746 li
520.236 201.657 li
521.073 202.013 li
521.909 202.083 li
522.746 202.682 li
523.583 200.528 li
524.42 201.653 li
525.257 201.968 li
526.094 202.462 li
526.931 203.01 li
527.768 202.941 li
528.605 203.371 li
529.442 201.602 li
530.279 202.119 li
531.116 201.35 li
531.953 201.266 li
532.79 201.901 li
533.627 200.783 li
534.464 200.468 li
535.301 200.59 li
536.138 200.179 li
.977081 .19968 1 .110842 cmyk
@
112.638 181.537 mo
113.475 183.072 li
114.312 183.361 li
115.149 183.431 li
115.986 183.11 li
116.823 183.028 li
117.66 183.373 li
118.496 182.643 li
119.333 182.884 li
120.17 182.504 li
121.007 183.245 li
121.844 183.05 li
122.681 182.592 li
123.518 182.507 li
124.355 182.39 li
125.192 182.864 li
126.029 182.317 li
126.866 181.319 li
127.703 181.27 li
128.54 180.768 li
129.377 181.266 li
130.214 180.766 li
131.051 180.645 li
131.888 180.827 li
132.725 181.177 li
133.562 181.9 li
134.399 180.818 li
135.236 181.04 li
136.073 180.997 li
136.91 180.141 li
137.746 180.795 li
138.583 181.784 li
139.42 182.937 li
140.257 182.991 li
141.094 183.147 li
141.931 182.113 li
142.768 182.742 li
143.605 183.164 li
144.442 182.815 li
145.279 182.494 li
146.116 181.909 li
146.953 181.343 li
147.79 180.717 li
148.627 179.748 li
149.464 180.579 li
150.301 182.906 li
151.138 181.061 li
151.975 182.649 li
152.812 182.108 li
153.649 183.08 li
154.486 181.939 li
155.323 184.134 li
156.16 184.666 li
156.996 184.314 li
157.833 182.317 li
158.67 180.905 li
159.507 179.099 li
160.344 178.982 li
161.181 178.386 li
162.018 177.763 li
162.855 178.023 li
163.692 179.835 li
164.529 180.551 li
165.366 175.25 li
166.203 177.818 li
167.04 178.198 li
167.877 175.528 li
168.714 172.434 li
169.551 171.871 li
170.388 171.675 li
171.225 171.986 li
172.062 168.192 li
172.899 167.086 li
173.736 168.437 li
174.573 168.742 li
175.41 169.18 li
176.246 167.827 li
177.083 167.636 li
177.92 166.063 li
178.757 166.022 li
179.594 164.077 li
180.431 163.98 li
181.268 165.084 li
182.105 164.497 li
182.942 164.229 li
183.779 165.023 li
184.616 165.449 li
185.453 165.689 li
186.29 166.263 li
187.127 166.538 li
187.964 167.394 li
188.801 164.204 li
189.638 158.147 li
190.475 158.418 li
191.312 156.935 li
192.149 157.793 li
192.986 158.758 li
193.823 158.193 li
194.66 158.454 li
195.496 158.438 li
196.333 159.744 li
197.17 158.654 li
198.007 156.299 li
198.844 156.26 li
199.681 154.97 li
200.518 155.465 li
201.355 155.378 li
202.192 156.474 li
203.029 157.121 li
203.866 158.106 li
204.703 159.117 li
205.54 164.428 li
206.377 162.525 li
207.214 161.237 li
208.051 163.24 li
208.888 164.799 li
209.725 164.969 li
210.562 165.383 li
211.399 166.789 li
212.236 166.046 li
213.073 165.014 li
213.91 163.455 li
214.746 167.68 li
215.583 168.167 li
216.42 166.688 li
217.257 165.11 li
218.094 167.303 li
218.931 167.934 li
219.768 168.089 li
220.605 167.051 li
221.442 165.259 li
222.279 164.684 li
223.116 164.932 li
223.953 163.907 li
224.79 162.535 li
225.627 162.214 li
226.464 161.889 li
227.301 162.849 li
228.138 164.268 li
228.975 163.098 li
229.812 163.144 li
230.649 162.995 li
231.486 163.364 li
232.323 162.344 li
233.16 161.894 li
233.996 161.699 li
234.833 161.489 li
235.67 162.62 li
236.507 161.423 li
237.344 163.166 li
238.181 163.103 li
239.018 161.694 li
239.855 161.867 li
240.692 162.121 li
241.529 163.078 li
242.366 162.738 li
243.203 163.472 li
244.04 162.733 li
244.877 163.873 li
245.714 162.486 li
246.551 163.318 li
247.388 161.355 li
248.225 161.742 li
249.062 162.492 li
249.899 163.323 li
250.736 165.08 li
251.573 164.434 li
252.41 165.009 li
253.246 165.108 li
254.083 167.149 li
254.92 167.707 li
255.757 168.281 li
256.594 176.368 li
257.431 177.46 li
258.268 179.087 li
259.105 183.515 li
259.942 182.887 li
260.779 178.48 li
261.616 176.765 li
262.453 177.544 li
263.29 176.879 li
264.127 176.086 li
264.964 176.776 li
265.801 175.634 li
266.638 172.505 li
267.475 172.689 li
268.312 171.856 li
269.149 171.31 li
269.986 171.486 li
270.823 169.976 li
271.659 168.471 li
272.496 169.09 li
273.333 169.474 li
274.17 169.548 li
275.007 170.719 li
275.844 170.746 li
276.681 169.769 li
277.518 169.603 li
278.355 171.889 li
279.192 171.854 li
280.029 172.027 li
280.866 171.765 li
281.703 172.329 li
282.54 174.131 li
283.377 176.193 li
284.214 174.629 li
285.051 176.391 li
285.888 174.31 li
286.725 173.253 li
287.562 173.77 li
288.399 173.141 li
289.236 173.405 li
290.073 173.478 li
290.909 172.827 li
291.746 171.619 li
292.583 169.677 li
293.42 168.787 li
294.257 167.618 li
295.094 167.721 li
295.931 168.109 li
296.768 167.058 li
297.605 167.441 li
298.442 168.462 li
299.279 168.929 li
300.116 167.67 li
300.953 167.208 li
301.79 167.401 li
302.627 166.457 li
303.464 165.945 li
304.301 166.567 li
305.138 166.276 li
305.975 166.889 li
306.812 166.836 li
307.649 166.965 li
308.486 167.493 li
309.323 166.996 li
310.159 167.095 li
310.996 165.816 li
311.833 164.886 li
312.67 164.82 li
313.507 165.018 li
314.344 164.636 li
315.181 164.046 li
316.018 163.779 li
316.855 163.49 li
317.692 164.352 li
318.529 163.095 li
319.366 162.572 li
320.203 162.219 li
321.04 163.489 li
321.877 162.435 li
322.714 162.867 li
323.551 162.909 li
324.388 163.901 li
325.225 164.24 li
326.062 164.667 li
326.899 166.417 li
327.736 165.181 li
328.573 165.658 li
329.409 165.935 li
330.246 165.274 li
331.083 161.875 li
331.92 161.41 li
332.757 161.299 li
333.594 164.003 li
334.431 162.162 li
335.268 160.481 li
336.105 161.292 li
336.942 163.882 li
337.779 165.153 li
338.616 165.043 li
339.453 163.972 li
340.29 161.88 li
341.127 160.572 li
341.964 161.281 li
342.801 161.836 li
343.638 162.279 li
344.475 164.104 li
345.312 166.789 li
346.149 164.718 li
346.986 166.362 li
347.823 166.032 li
348.659 163.078 li
349.496 164.026 li
350.333 163.662 li
351.17 163.98 li
352.007 160.634 li
352.844 157.823 li
353.681 157.639 li
354.518 156.372 li
355.355 156.956 li
356.192 155.878 li
357.029 155.584 li
357.866 155.468 li
358.703 156.411 li
359.54 156.973 li
360.377 156.913 li
361.214 156.734 li
362.051 157.378 li
362.888 159.116 li
363.725 157.983 li
364.562 158.881 li
365.399 159.278 li
366.236 159.163 li
367.073 159.897 li
367.909 159.266 li
368.746 159.5 li
369.583 160.833 li
370.42 161.243 li
371.257 161.365 li
372.094 162.106 li
372.931 162.143 li
373.768 161.914 li
374.605 160.865 li
375.442 163.469 li
376.279 162.214 li
377.116 162.664 li
377.953 160.309 li
378.79 160.66 li
379.627 158.866 li
380.464 159.008 li
381.301 160.276 li
382.138 160.936 li
382.975 161.045 li
383.812 160.882 li
384.649 162.156 li
385.486 162.855 li
386.323 161.643 li
387.159 159.898 li
387.996 159.916 li
388.833 161.042 li
389.67 163.459 li
390.507 162.976 li
391.344 157.246 li
392.181 158.409 li
393.018 159.501 li
393.855 157.176 li
394.692 154.745 li
395.529 155.328 li
396.366 154.402 li
397.203 153.709 li
398.04 153.08 li
398.877 153.69 li
399.714 153.677 li
400.551 153.899 li
401.388 154.256 li
402.225 156.74 li
403.062 158.301 li
403.899 158.945 li
404.736 157.681 li
405.573 158.59 li
406.409 158.556 li
407.246 159.018 li
408.083 159.918 li
408.92 160.756 li
409.757 162.305 li
410.594 165.32 li
411.431 163.842 li
412.268 163.772 li
413.105 163.956 li
413.942 160.684 li
414.779 161.237 li
415.616 165.745 li
416.453 168.73 li
417.29 169.054 li
418.127 166.97 li
418.964 169.98 li
419.801 170.196 li
420.638 170.31 li
421.475 170.048 li
422.312 170.953 li
423.149 172.954 li
423.986 169.713 li
424.823 164.97 li
425.659 166.125 li
426.496 167.831 li
427.333 171.145 li
428.17 168.117 li
429.007 169.585 li
429.844 167.925 li
430.681 168.654 li
431.518 167.676 li
432.355 169.264 li
433.192 171.784 li
434.029 173.345 li
434.866 175.235 li
435.703 168.913 li
436.54 170.549 li
437.377 169.241 li
438.214 161.879 li
439.051 161.918 li
439.888 161.11 li
440.725 161.988 li
441.562 165.073 li
442.399 168.85 li
443.236 165.497 li
444.073 164.853 li
444.909 161.779 li
445.746 160.647 li
446.583 162.394 li
447.42 164.421 li
448.257 161.054 li
449.094 158.461 li
449.931 157.417 li
450.768 154.017 li
451.605 154.506 li
452.442 153.678 li
453.279 152.291 li
454.116 154.801 li
454.953 154.759 li
455.79 154.951 li
456.627 155.822 li
457.464 155.756 li
458.301 155.833 li
459.138 160.069 li
459.975 157.79 li
460.812 160.088 li
461.649 157.103 li
462.486 155.991 li
463.323 154.946 li
464.159 154.512 li
464.996 157.238 li
465.833 157.799 li
466.67 155.774 li
467.507 156.949 li
468.344 159.098 li
469.181 161.777 li
470.018 160.194 li
470.855 161.302 li
471.692 163.984 li
472.529 161.537 li
473.366 159.879 li
474.203 163.141 li
475.04 163.359 li
475.877 159.897 li
476.714 163.258 li
477.551 163.39 li
478.388 165.927 li
479.225 166.157 li
480.062 165.771 li
480.899 169.009 li
481.736 165.98 li
482.573 161.214 li
483.409 162.189 li
484.246 155.971 li
485.083 159.519 li
485.92 157.602 li
486.757 158.308 li
487.594 154.161 li
488.431 155.341 li
489.268 154.198 li
490.105 155.96 li
490.942 155.344 li
491.779 157.217 li
492.616 156.794 li
493.453 156.71 li
494.29 156.62 li
495.127 155.112 li
495.964 156.305 li
496.801 153.546 li
497.638 152.569 li
498.475 154.558 li
499.312 155.295 li
500.149 156.426 li
500.986 156.067 li
501.823 154.876 li
502.659 153.425 li
503.496 153.077 li
504.333 153.415 li
505.17 153.169 li
506.007 152.411 li
506.844 150.701 li
507.681 151.069 li
508.518 150.574 li
509.355 151.455 li
510.192 149.982 li
511.029 149.816 li
511.866 150.072 li
512.703 150.049 li
513.54 149.586 li
514.377 150.173 li
515.214 150.037 li
516.051 151.24 li
516.888 151.878 li
517.725 150.773 li
518.562 150.531 li
519.399 151.211 li
520.236 149.92 li
521.073 150.604 li
521.909 152.362 li
522.746 154.368 li
523.583 152.092 li
524.42 151.592 li
525.257 152.461 li
526.094 152.5 li
526.931 153.629 li
527.768 154.546 li
528.605 154.481 li
529.442 149.889 li
530.279 150.443 li
531.116 148.27 li
531.953 148.317 li
532.79 149.241 li
533.627 147.581 li
534.464 146.843 li
535.301 146.057 li
536.138 145.512 li
.780575 0 1 0 cmyk
@
112.638 181.537 mo
113.475 183.072 li
114.312 183.361 li
115.149 183.431 li
115.986 183.107 li
116.823 183.021 li
117.66 183.392 li
118.496 182.681 li
119.333 182.927 li
120.17 182.539 li
121.007 183.514 li
121.844 184.312 li
122.681 183.051 li
123.518 183.11 li
124.355 181.674 li
125.192 183.533 li
126.029 183.146 li
126.866 184.124 li
127.703 186.313 li
128.54 185.149 li
129.377 186.516 li
130.214 188.001 li
131.051 190.188 li
131.888 191.194 li
132.725 193.015 li
133.562 192.89 li
134.399 191.029 li
135.236 190.091 li
136.073 189.93 li
136.91 187.925 li
137.746 189.786 li
138.583 188.526 li
139.42 190.754 li
140.257 190.124 li
141.094 190.346 li
141.931 185.752 li
142.768 184.708 li
143.605 184.977 li
144.442 186.051 li
145.279 187.94 li
146.116 188.089 li
146.953 188.176 li
147.79 185.726 li
148.627 185.181 li
149.464 186.425 li
150.301 188.225 li
151.138 185.343 li
151.975 185.674 li
152.812 185.341 li
153.649 186.269 li
154.486 187.374 li
155.323 188.928 li
156.16 190.251 li
156.996 186.376 li
157.833 186.311 li
158.67 184.059 li
159.507 181.688 li
160.344 182.691 li
161.181 182.092 li
162.018 181.014 li
162.855 181.613 li
163.692 184.133 li
164.529 189.38 li
165.366 188.856 li
166.203 189.355 li
167.04 191.176 li
167.877 190.59 li
168.714 191.39 li
169.551 189.676 li
170.388 188.948 li
171.225 189.521 li
172.062 185.029 li
172.899 185.266 li
173.736 188.494 li
174.573 188.405 li
175.41 188.297 li
176.246 186.676 li
177.083 187.1 li
177.92 186.214 li
178.757 185.609 li
179.594 185.479 li
180.431 185.92 li
181.268 186.709 li
182.105 186.097 li
182.942 186.578 li
183.779 187.43 li
184.616 188.629 li
185.453 189.012 li
186.29 188.367 li
187.127 188.823 li
187.964 189.154 li
188.801 188.171 li
189.638 188.698 li
190.475 187.652 li
191.312 187.155 li
192.149 187.017 li
192.986 188.335 li
193.823 187.678 li
194.66 188.057 li
195.496 188.47 li
196.333 189.968 li
197.17 188.625 li
198.007 187.772 li
198.844 188.476 li
199.681 188.119 li
200.518 187.977 li
201.355 188.516 li
202.192 189.285 li
203.029 188.74 li
203.866 188.768 li
204.703 189.511 li
205.54 190.984 li
206.377 190.531 li
207.214 191.351 li
208.051 190.87 li
208.888 190.249 li
209.725 189.516 li
210.562 189.935 li
211.399 189.95 li
212.236 190.504 li
213.073 189.806 li
213.91 188.689 li
214.746 187.827 li
215.583 187.207 li
216.42 186.999 li
217.257 187.214 li
218.094 188.918 li
218.931 189.763 li
219.768 192.086 li
220.605 191.931 li
221.442 188.284 li
222.279 187.712 li
223.116 188.806 li
223.953 187.693 li
224.79 187.369 li
225.627 187.04 li
226.464 189.056 li
227.301 189.535 li
228.138 189.742 li
228.975 188.812 li
229.812 187.932 li
230.649 187.776 li
231.486 187.215 li
232.323 186.173 li
233.16 185.948 li
233.996 185.145 li
234.833 185.873 li
235.67 186.748 li
236.507 186.156 li
237.344 187.716 li
238.181 187.744 li
239.018 187.296 li
239.855 187.834 li
240.692 188.728 li
241.529 187.437 li
242.366 187.357 li
243.203 188.565 li
244.04 187.189 li
244.877 188.791 li
245.714 187.761 li
246.551 189.074 li
247.388 188.015 li
248.225 187.566 li
249.062 188.42 li
249.899 189.154 li
250.736 189.771 li
251.573 189.675 li
252.41 189.754 li
253.246 189.674 li
254.083 188.852 li
254.92 189.58 li
255.757 189.233 li
256.594 189.604 li
257.431 189.109 li
258.268 188.871 li
259.105 190.242 li
259.942 191.261 li
260.779 188.995 li
261.616 188.588 li
262.453 189.64 li
263.29 189.945 li
264.127 187.613 li
264.964 187.34 li
265.801 186.512 li
266.638 184.156 li
267.475 183.95 li
268.312 182.691 li
269.149 182.376 li
269.986 182.544 li
270.823 180.859 li
271.659 180.022 li
272.496 181.981 li
273.333 181.597 li
274.17 181.356 li
275.007 183.081 li
275.844 182.817 li
276.681 183.473 li
277.518 182.055 li
278.355 182.172 li
279.192 181.772 li
280.029 180.604 li
280.866 177.685 li
281.703 180.246 li
282.54 181.799 li
283.377 182.932 li
284.214 183.711 li
285.051 180.922 li
285.888 180.422 li
286.725 178.573 li
287.562 178.755 li
288.399 178.304 li
289.236 177.631 li
290.073 178.056 li
290.909 177.072 li
291.746 176.171 li
292.583 175.95 li
293.42 174.453 li
294.257 174.205 li
295.094 176.395 li
295.931 177.697 li
296.768 176.662 li
297.605 178.244 li
298.442 181.164 li
299.279 181.183 li
300.116 180.811 li
300.953 181.244 li
301.79 181.569 li
302.627 180.286 li
303.464 177.57 li
304.301 178.61 li
305.138 177.582 li
305.975 178.899 li
306.812 178.458 li
307.649 178.907 li
308.486 179.346 li
309.323 179.271 li
310.159 178.354 li
310.996 179.683 li
311.833 179.158 li
312.67 180.839 li
313.507 179.96 li
314.344 180.676 li
315.181 180.437 li
316.018 180.09 li
316.855 180.379 li
317.692 180.682 li
318.529 179.669 li
319.366 178.738 li
320.203 178.058 li
321.04 178.492 li
321.877 178.77 li
322.714 179.027 li
323.551 180.241 li
324.388 180.586 li
325.225 181.565 li
326.062 180.123 li
326.899 181.557 li
327.736 180.242 li
328.573 179.726 li
329.409 177.966 li
330.246 177.632 li
331.083 176.918 li
331.92 176.027 li
332.757 174.947 li
333.594 175.089 li
334.431 174.939 li
335.268 172.689 li
336.105 173.491 li
336.942 174.969 li
337.779 176.958 li
338.616 178.586 li
339.453 178.859 li
340.29 176.906 li
341.127 175.314 li
341.964 175.812 li
342.801 174.679 li
343.638 174.757 li
344.475 176.984 li
345.312 177.582 li
346.149 176.65 li
346.986 178.662 li
347.823 178.174 li
348.659 176.776 li
349.496 176.888 li
350.333 177.273 li
351.17 178.223 li
352.007 176.345 li
352.844 176.835 li
353.681 178.008 li
354.518 176.795 li
355.355 175.557 li
356.192 175.572 li
357.029 174.855 li
357.866 175.571 li
358.703 175.817 li
359.54 178.189 li
360.377 178.726 li
361.214 179.204 li
362.051 179.021 li
362.888 180.316 li
363.725 180.907 li
364.562 181.215 li
365.399 181.939 li
366.236 182.084 li
367.073 182.16 li
367.909 181.822 li
368.746 182.478 li
369.583 182.999 li
370.42 182.684 li
371.257 181.315 li
372.094 180.605 li
372.931 181.381 li
373.768 181.37 li
374.605 180.337 li
375.442 180.951 li
376.279 180.518 li
377.116 180.095 li
377.953 178.218 li
378.79 178.027 li
379.627 177.65 li
380.464 177.515 li
381.301 178.594 li
382.138 179.95 li
382.975 180.378 li
383.812 181.495 li
384.649 181.71 li
385.486 183.368 li
386.323 182.939 li
387.159 182.975 li
387.996 182.659 li
388.833 183.335 li
389.67 184.315 li
390.507 183.523 li
391.344 183.438 li
392.181 184.787 li
393.018 184.934 li
393.855 183.979 li
394.692 182.715 li
395.529 183.459 li
396.366 182.57 li
397.203 182.57 li
398.04 182.271 li
398.877 186.518 li
399.714 185.821 li
400.551 185.203 li
401.388 185.511 li
402.225 185.629 li
403.062 186.003 li
403.899 185.709 li
404.736 183.776 li
405.573 184.808 li
406.409 184.947 li
407.246 183.598 li
408.083 184.36 li
408.92 184.899 li
409.757 184.928 li
410.594 185.892 li
411.431 185.927 li
412.268 187.552 li
413.105 187.138 li
413.942 185.876 li
414.779 185.285 li
415.616 186.341 li
416.453 187.313 li
417.29 188.196 li
418.127 188.442 li
418.964 188.921 li
419.801 190.605 li
420.638 189.351 li
421.475 189.127 li
422.312 190.502 li
423.149 192.12 li
423.986 191.217 li
424.823 189.06 li
425.659 189.542 li
426.496 191.694 li
427.333 192.566 li
428.17 188.548 li
429.007 189.027 li
429.844 188.088 li
430.681 188.501 li
431.518 187.94 li
432.355 188.633 li
433.192 188.668 li
434.029 192 li
434.866 193.308 li
435.703 190.178 li
436.54 190.646 li
437.377 190.758 li
438.214 188.331 li
439.051 188.432 li
439.888 188.281 li
440.725 189.535 li
441.562 191.953 li
442.399 194.137 li
443.236 192.405 li
444.073 192.405 li
444.909 191.947 li
445.746 191.102 li
446.583 191.126 li
447.42 192.198 li
448.257 187.696 li
449.094 187.919 li
449.931 187.905 li
450.768 187.364 li
451.605 188.902 li
452.442 188.36 li
453.279 187.343 li
454.116 188.355 li
454.953 188.472 li
455.79 190.216 li
456.627 191.607 li
457.464 190.807 li
458.301 191.358 li
459.138 192.805 li
459.975 194.415 li
460.812 195.895 li
461.649 195.418 li
462.486 194.545 li
463.323 194.747 li
464.159 194.356 li
464.996 195.669 li
465.833 195.344 li
466.67 196.253 li
467.507 195.801 li
468.344 196.18 li
469.181 198.36 li
470.018 197.722 li
470.855 197.738 li
471.692 198.619 li
472.529 196.841 li
473.366 194.408 li
474.203 196.653 li
475.04 197.747 li
475.877 195.281 li
476.714 196.493 li
477.551 196.677 li
478.388 198.367 li
479.225 199.057 li
480.062 198.353 li
480.899 198.657 li
481.736 198.112 li
482.573 195.737 li
483.409 195.883 li
484.246 194.579 li
485.083 194.809 li
485.92 193.268 li
486.757 191.704 li
487.594 192.157 li
488.431 193.011 li
489.268 193.227 li
490.105 194.019 li
490.942 193.326 li
491.779 193.722 li
492.616 195.355 li
493.453 195.034 li
494.29 195.48 li
495.127 194.506 li
495.964 194.046 li
496.801 194.497 li
497.638 193.415 li
498.475 194.451 li
499.312 194.785 li
500.149 196.78 li
500.986 196.876 li
501.823 196.813 li
502.659 196.908 li
503.496 196.657 li
504.333 196.499 li
505.17 197.289 li
506.007 196.109 li
506.844 195.576 li
507.681 195.904 li
508.518 195.492 li
509.355 195.516 li
510.192 193.992 li
511.029 193.559 li
511.866 193.492 li
512.703 193.732 li
513.54 193.299 li
514.377 194.255 li
515.214 194.238 li
516.051 195.643 li
516.888 195.102 li
517.725 195.04 li
518.562 195.705 li
519.399 196.372 li
520.236 195.056 li
521.073 195.267 li
521.909 195.641 li
522.746 195.877 li
523.583 195.509 li
524.42 195.608 li
525.257 196.057 li
526.094 196.822 li
526.931 197.391 li
527.768 197.777 li
528.605 198.139 li
529.442 196.73 li
530.279 195.685 li
531.116 195.024 li
531.953 194.79 li
532.79 195.508 li
533.627 194.885 li
534.464 194.75 li
535.301 194.757 li
536.138 194.403 li
.685389 0 .161105 0 cmyk
@
112.638 181.537 mo
113.475 182.647 li
114.312 182.727 li
115.149 183.239 li
115.986 182.855 li
116.823 182.375 li
117.66 182.478 li
118.496 181.551 li
119.333 181.874 li
120.17 181.698 li
121.007 183.084 li
121.844 182.408 li
122.681 181.5 li
123.518 181.737 li
124.355 180.96 li
125.192 181.687 li
126.029 181.42 li
126.866 180.206 li
127.703 179.422 li
128.54 179.16 li
129.377 179.299 li
130.214 178.8 li
131.051 179.129 li
131.888 179.326 li
132.725 179.714 li
133.562 180.012 li
134.399 178.623 li
135.236 178.486 li
136.073 179.184 li
136.91 178.547 li
137.746 178.854 li
138.583 178.725 li
139.42 180.564 li
140.257 180.658 li
141.094 180.797 li
141.931 178.916 li
142.768 178.915 li
143.605 179.718 li
144.442 180.316 li
145.279 179.802 li
146.116 179.751 li
146.953 179.383 li
147.79 178.457 li
148.627 177.362 li
149.464 178.389 li
150.301 180.958 li
151.138 179.723 li
151.975 181.892 li
152.812 180.916 li
153.649 181.993 li
154.486 181.248 li
155.323 182.95 li
156.16 184.336 li
156.996 184.463 li
157.833 182.63 li
158.67 181.363 li
159.507 179.233 li
160.344 179.798 li
161.181 179.656 li
162.018 178.457 li
162.855 178.985 li
163.692 180.776 li
164.529 181.656 li
165.366 178.548 li
166.203 180.075 li
167.04 180.134 li
167.877 178.232 li
168.714 177.387 li
169.551 176.678 li
170.388 176.745 li
171.225 176.446 li
172.062 172.626 li
172.899 172.141 li
173.736 173.625 li
174.573 174.013 li
175.41 174.343 li
176.246 173.431 li
177.083 173.183 li
177.92 171.693 li
178.757 172.26 li
179.594 170.763 li
180.431 170.618 li
181.268 171.498 li
182.105 170.836 li
182.942 170.925 li
183.779 171.838 li
184.616 171.647 li
185.453 171.336 li
186.29 171.682 li
187.127 171.341 li
187.964 171.807 li
188.801 169.182 li
189.638 167.672 li
190.475 167.411 li
191.312 166.587 li
192.149 166.7 li
192.986 167.434 li
193.823 167.261 li
194.66 168.29 li
195.496 168.004 li
196.333 168.969 li
197.17 168.771 li
198.007 168.229 li
198.844 168.234 li
199.681 167.673 li
200.518 168.543 li
201.355 168.625 li
202.192 169.241 li
203.029 169.345 li
203.866 169.135 li
204.703 169.387 li
205.54 171.153 li
206.377 171.521 li
207.214 171.712 li
208.051 171.91 li
208.888 171.405 li
209.725 171.3 li
210.562 172.023 li
211.399 172.328 li
212.236 172.356 li
213.073 172.523 li
213.91 171.316 li
214.746 172.294 li
215.583 171.74 li
216.42 171.216 li
217.257 171.227 li
218.094 172.806 li
218.931 172.464 li
219.768 173.382 li
220.605 172.645 li
221.442 171.565 li
222.279 170.622 li
223.116 170.717 li
223.953 169.922 li
224.79 169.664 li
225.627 169.28 li
226.464 169.592 li
227.301 170.291 li
228.138 170.829 li
228.975 169.839 li
229.812 169.864 li
230.649 169.321 li
231.486 169.31 li
232.323 168.505 li
233.16 167.935 li
233.996 167.939 li
234.833 168.179 li
235.67 168.708 li
236.507 168.221 li
237.344 168.806 li
238.181 168.86 li
239.018 168.202 li
239.855 168.35 li
240.692 168.354 li
241.529 168.572 li
242.366 168.442 li
243.203 169.348 li
244.04 168.128 li
244.877 169.313 li
245.714 168.757 li
246.551 168.864 li
247.388 167.44 li
248.225 167.855 li
249.062 169.231 li
249.899 170.001 li
250.736 171.043 li
251.573 170.649 li
252.41 172.121 li
253.246 172.212 li
254.083 174.225 li
254.92 174.937 li
255.757 175.022 li
256.594 182.2 li
257.431 184.228 li
258.268 186.27 li
259.105 189.377 li
259.942 188.448 li
260.779 184.44 li
261.616 184.022 li
262.453 184.559 li
263.29 184.497 li
264.127 183.001 li
264.964 183.816 li
265.801 183.292 li
266.638 180.443 li
267.475 180.963 li
268.312 181.015 li
269.149 180.751 li
269.986 179.991 li
270.823 179.163 li
271.659 177.634 li
272.496 177.846 li
273.333 177.987 li
274.17 177.489 li
275.007 179.269 li
275.844 180.209 li
276.681 179.663 li
277.518 178.634 li
278.355 178.889 li
279.192 178.535 li
280.029 176.844 li
280.866 176.137 li
281.703 178.442 li
282.54 179.647 li
283.377 179.719 li
284.214 178.428 li
285.051 178.281 li
285.888 177.129 li
286.725 174.563 li
287.562 174.863 li
288.399 174.513 li
289.236 174.701 li
290.073 175.205 li
290.909 173.909 li
291.746 172.13 li
292.583 170.837 li
293.42 170.652 li
294.257 169.36 li
295.094 170.092 li
295.931 170.697 li
296.768 169.206 li
297.605 168.237 li
298.442 169.28 li
299.279 171.037 li
300.116 169.89 li
300.953 169.68 li
301.79 170.527 li
302.627 169.159 li
303.464 166.79 li
304.301 165.586 li
305.138 165.772 li
305.975 166.828 li
306.812 166.929 li
307.649 167.795 li
308.486 168.867 li
309.323 169.206 li
310.159 169.159 li
310.996 168.502 li
311.833 167.521 li
312.67 167.952 li
313.507 167.419 li
314.344 167.246 li
315.181 167.021 li
316.018 166.597 li
316.855 165.881 li
317.692 166.591 li
318.529 165.877 li
319.366 164.448 li
320.203 162.855 li
321.04 163.021 li
321.877 163.422 li
322.714 163.619 li
323.551 163.393 li
324.388 164.622 li
325.225 165.958 li
326.062 165.248 li
326.899 167.609 li
327.736 166.446 li
328.573 166.625 li
329.409 166.469 li
330.246 166.497 li
331.083 164.809 li
331.92 164.283 li
332.757 164.523 li
333.594 166.824 li
334.431 164.976 li
335.268 163.979 li
336.105 164.073 li
336.942 166.307 li
337.779 166.283 li
338.616 166.998 li
339.453 166.159 li
340.29 165.212 li
341.127 164.44 li
341.964 164.593 li
342.801 163.785 li
343.638 163.239 li
344.475 163.932 li
345.312 165.635 li
346.149 164.117 li
346.986 164.711 li
347.823 164.837 li
348.659 162.792 li
349.496 162.805 li
350.333 162.23 li
351.17 161.65 li
352.007 159.979 li
352.844 156.774 li
353.681 157.09 li
354.518 155.742 li
355.355 156.272 li
356.192 155.145 li
357.029 153.575 li
357.866 153.908 li
358.703 155.05 li
359.54 155.708 li
360.377 155.444 li
361.214 155.778 li
362.051 155.769 li
362.888 157.312 li
363.725 157.45 li
364.562 157.858 li
365.399 158.626 li
366.236 158.568 li
367.073 158.435 li
367.909 158.01 li
368.746 158.47 li
369.583 158.962 li
370.42 159.426 li
371.257 159.675 li
372.094 159.761 li
372.931 159.958 li
373.768 159.814 li
374.605 158.74 li
375.442 160.789 li
376.279 159.888 li
377.116 160.474 li
377.953 158.15 li
378.79 157.796 li
379.627 157.932 li
380.464 157.682 li
381.301 159.11 li
382.138 159.799 li
382.975 160.971 li
383.812 160.999 li
384.649 162.17 li
385.486 162.507 li
386.323 161.403 li
387.159 160.363 li
387.996 160.018 li
388.833 160.263 li
389.67 160.323 li
390.507 160.454 li
391.344 156.17 li
392.181 157.332 li
393.018 159.224 li
393.855 156.97 li
394.692 154.77 li
395.529 156.111 li
396.366 154.704 li
397.203 153.437 li
398.04 154.48 li
398.877 155.449 li
399.714 155.345 li
400.551 154.212 li
401.388 155.884 li
402.225 156.487 li
403.062 156.74 li
403.899 156.499 li
404.736 156.652 li
405.573 158.762 li
406.409 159.03 li
407.246 158.624 li
408.083 160.636 li
408.92 159.91 li
409.757 159.672 li
410.594 161.361 li
411.431 160.696 li
412.268 161.851 li
413.105 161.883 li
413.942 159.058 li
414.779 158.796 li
415.616 161.251 li
416.453 162.8 li
417.29 163.926 li
418.127 164.343 li
418.964 166.117 li
419.801 166.215 li
420.638 164.522 li
421.475 164.726 li
422.312 166.305 li
423.149 167.87 li
423.986 166.117 li
424.823 162.037 li
425.659 163.538 li
426.496 165.601 li
427.333 168.503 li
428.17 167.289 li
429.007 167.242 li
429.844 167.373 li
430.681 169.027 li
431.518 169.19 li
432.355 171.142 li
433.192 173.681 li
434.029 177.34 li
434.866 180.443 li
435.703 175.398 li
436.54 175.312 li
437.377 175.028 li
438.214 169.064 li
439.051 167.58 li
439.888 166.219 li
440.725 168.067 li
441.562 171.256 li
442.399 175.171 li
443.236 172.736 li
444.073 171.96 li
444.909 168.694 li
445.746 168.107 li
446.583 169.566 li
447.42 171.06 li
448.257 166.88 li
449.094 165.612 li
449.931 164.973 li
450.768 161.977 li
451.605 163.474 li
452.442 162.083 li
453.279 160.611 li
454.116 163.395 li
454.953 162.65 li
455.79 164.162 li
456.627 165.291 li
457.464 165.386 li
458.301 166.506 li
459.138 171.052 li
459.975 168.781 li
460.812 170.795 li
461.649 168.669 li
462.486 167.958 li
463.323 166.899 li
464.159 166.593 li
464.996 169.375 li
465.833 169.853 li
466.67 169.157 li
467.507 169.805 li
468.344 171.125 li
469.181 173.604 li
470.018 173.045 li
470.855 174.27 li
471.692 175.777 li
472.529 173.806 li
473.366 173.9 li
474.203 176.598 li
475.04 176.758 li
475.877 173.8 li
476.714 176.519 li
477.551 176.258 li
478.388 178.765 li
479.225 178.962 li
480.062 178.941 li
480.899 181.182 li
481.736 178.832 li
482.573 175.097 li
483.409 175.368 li
484.246 169.995 li
485.083 172.311 li
485.92 170.486 li
486.757 170.145 li
487.594 166.126 li
488.431 166.599 li
489.268 165.677 li
490.105 166.945 li
490.942 164.992 li
491.779 163.863 li
492.616 164.725 li
493.453 163.28 li
494.29 163.776 li
495.127 161.438 li
495.964 159.78 li
496.801 157.968 li
497.638 156.683 li
498.475 160.083 li
499.312 160.859 li
500.149 163.311 li
500.986 162.69 li
501.823 161.991 li
502.659 160.731 li
503.496 160.233 li
504.333 160.712 li
505.17 160.804 li
506.007 158.564 li
506.844 154.059 li
507.681 153.687 li
508.518 153.205 li
509.355 154.691 li
510.192 151.838 li
511.029 151.179 li
511.866 151.03 li
512.703 152.798 li
513.54 153.581 li
514.377 155.101 li
515.214 154.252 li
516.051 156.841 li
516.888 155.225 li
517.725 154.994 li
518.562 154.915 li
519.399 156.283 li
520.236 153.859 li
521.073 154.8 li
521.909 156.166 li
522.746 157.151 li
523.583 155.405 li
524.42 155.996 li
525.257 156.961 li
526.094 156.71 li
526.931 158.257 li
527.768 158.133 li
528.605 157.053 li
529.442 153.208 li
530.279 154.563 li
531.116 151.49 li
531.953 152.339 li
532.79 153.582 li
533.627 151.969 li
534.464 151.814 li
535.301 151.335 li
536.138 150.885 li
.930449 .507011 0 .000579843 cmyk
@
112.638 181.085 mo
113.475 180.254 li
114.312 180.483 li
115.149 177.023 li
115.986 175.733 li
116.823 173.177 li
117.66 174.985 li
118.496 176.119 li
119.333 175.661 li
120.17 172.574 li
121.007 165.944 li
121.844 166.993 li
122.681 166.474 li
123.518 163.605 li
124.355 164.967 li
125.192 162.327 li
126.029 161.724 li
126.866 163.075 li
127.703 165.871 li
128.54 164.28 li
129.377 166.173 li
130.214 164.811 li
131.051 164.063 li
131.888 161.495 li
132.725 164.437 li
133.562 168.198 li
134.399 168.656 li
135.236 169.331 li
136.073 169.102 li
136.91 168.584 li
137.746 170.392 li
138.583 172.116 li
139.42 171.67 li
140.257 172.948 li
141.094 171.067 li
141.931 167.68 li
142.768 167.897 li
143.605 168.355 li
144.442 167.921 li
145.279 171.14 li
146.116 170.236 li
146.953 167.824 li
147.79 166.318 li
148.627 168.054 li
149.464 171.14 li
150.301 176.866 li
151.138 174.154 li
151.975 174.383 li
152.812 174.756 li
153.649 173.708 li
154.486 174.009 li
155.323 175.962 li
156.16 179.133 li
156.996 174.383 li
157.833 171.296 li
158.67 171.899 li
159.507 169.259 li
160.344 172.502 li
161.181 172.719 li
162.018 173.551 li
162.855 172.201 li
163.692 175.13 li
164.529 176.866 li
165.366 171.067 li
166.203 171.743 li
167.04 170.585 li
167.877 167.535 li
168.714 167.101 li
169.551 164.521 li
170.388 166.197 li
171.225 165.365 li
172.062 160.603 li
172.899 157.457 li
173.736 156.299 li
174.573 157.204 li
175.41 158.047 li
176.246 155.468 li
177.083 156.143 li
177.92 158.566 li
178.757 157.806 li
179.594 154.889 li
180.431 155.383 li
181.268 156.866 li
182.105 154.19 li
182.942 153.43 li
183.779 152.61 li
184.616 154.612 li
185.453 155.094 li
186.29 155.817 li
187.127 156.637 li
187.964 157.18 li
188.801 156.107 li
189.638 157.3 li
190.475 157.397 li
191.312 156.553 li
192.149 154.72 li
192.986 155.456 li
193.823 153.02 li
194.66 153.997 li
195.496 154.684 li
196.333 156.07 li
197.17 156.082 li
198.007 154.684 li
198.844 154.154 li
199.681 151.959 li
200.518 152.249 li
201.355 150.658 li
202.192 151.248 li
203.029 152.538 li
203.866 152.586 li
204.703 154.262 li
205.54 156.42 li
206.377 157.481 li
207.214 158.855 li
208.051 158.325 li
208.888 155.805 li
209.725 155.287 li
210.562 156.504 li
211.399 156.48 li
212.236 154.925 li
213.073 153.72 li
213.91 151.791 li
214.746 151.477 li
215.583 154.371 li
216.42 154.527 li
217.257 156.89 li
218.094 159.844 li
218.931 160.29 li
219.768 161.749 li
220.605 159.313 li
221.442 153.165 li
222.279 153.478 li
223.116 153.671 li
223.953 152.9 li
224.79 154.407 li
225.627 151.996 li
226.464 156.082 li
227.301 158.602 li
228.138 159.53 li
228.975 158.132 li
229.812 159.205 li
230.649 160.555 li
231.486 160.157 li
232.323 159.687 li
233.16 159.349 li
233.996 158.168 li
234.833 158.843 li
235.67 159.759 li
236.507 159.494 li
237.344 161.29 li
238.181 161.11 li
239.018 160.495 li
239.855 160.121 li
240.692 161.495 li
241.529 163.292 li
242.366 161.58 li
243.203 164.883 li
244.04 163.894 li
244.877 166.209 li
245.714 166.354 li
246.551 168.21 li
247.388 164.678 li
248.225 164.365 li
249.062 166.257 li
249.899 166.848 li
250.736 170.838 li
251.573 170.706 li
252.41 171.851 li
253.246 169.874 li
254.083 171.947 li
254.92 172.695 li
255.757 170.067 li
256.594 175.697 li
257.431 173.997 li
258.268 174.539 li
259.105 178.289 li
259.942 179.554 li
260.779 176.782 li
261.616 177.638 li
262.453 178.879 li
263.29 179.253 li
264.127 177.794 li
264.964 177.047 li
265.801 175.528 li
266.638 171.694 li
267.475 171.441 li
268.312 169.898 li
269.149 169.512 li
269.986 173.708 li
270.823 172.562 li
271.659 171.586 li
272.496 171.513 li
273.333 169.488 li
274.17 169.018 li
275.007 171.935 li
275.844 171.067 li
276.681 169.681 li
277.518 166.956 li
278.355 166.631 li
279.192 165.558 li
280.029 164.063 li
280.866 164.497 li
281.703 167.583 li
282.54 168.5 li
283.377 169.38 li
284.214 164.931 li
285.051 165.462 li
285.888 163.207 li
286.725 161.387 li
287.562 162.026 li
288.399 161.821 li
289.236 160.868 li
290.073 160.169 li
290.909 157.626 li
291.746 159.976 li
292.583 159.771 li
293.42 160.217 li
294.257 159.265 li
295.094 160.639 li
295.931 162.267 li
296.768 161.459 li
297.605 160.953 li
298.442 162.641 li
299.279 163.774 li
300.116 161.315 li
300.953 162.074 li
301.79 161.399 li
302.627 159.916 li
303.464 157.384 li
304.301 156.721 li
305.138 157.71 li
305.975 158.638 li
306.812 158.325 li
307.649 157.565 li
308.486 159.591 li
309.323 158.18 li
310.159 156.324 li
310.996 155.974 li
311.833 155.709 li
312.67 159 li
313.507 158.06 li
314.344 158.385 li
315.181 157.891 li
316.018 157.686 li
316.855 157.662 li
317.692 159.615 li
318.529 158.662 li
319.366 156.022 li
320.203 156.42 li
321.04 156.83 li
321.877 155.841 li
322.714 156.649 li
323.551 155.962 li
324.388 156.77 li
325.225 156.938 li
326.062 155.636 li
326.899 157.662 li
327.736 155.263 li
328.573 159.796 li
329.409 161.773 li
330.246 162.641 li
331.083 161.604 li
331.92 162.568 li
332.757 162.544 li
333.594 164.353 li
334.431 163.714 li
335.268 162.677 li
336.105 163.943 li
336.942 165.799 li
337.779 165.763 li
338.616 166.667 li
339.453 167.39 li
340.29 166.366 li
341.127 165.787 li
341.964 166.981 li
342.801 164.955 li
343.638 165.124 li
344.475 166.872 li
345.312 168.439 li
346.149 167.27 li
346.986 169.5 li
347.823 169.573 li
348.659 168.258 li
349.496 168.897 li
350.333 169.09 li
351.17 169.151 li
352.007 165.498 li
352.844 163.171 li
353.681 163.436 li
354.518 162.773 li
355.355 163.87 li
356.192 162.387 li
357.029 161.917 li
357.866 164.087 li
358.703 164.618 li
359.54 165.679 li
360.377 164.148 li
361.214 164.569 li
362.051 164.461 li
362.888 167.029 li
363.725 165.51 li
364.562 166.607 li
365.399 168.078 li
366.236 168.258 li
367.073 167.824 li
367.909 166.776 li
368.746 166.691 li
369.583 170.404 li
370.42 171.574 li
371.257 171.429 li
372.094 172.128 li
372.931 170.501 li
373.768 173.334 li
374.605 171.61 li
375.442 173.43 li
376.279 172.056 li
377.116 172.345 li
377.953 169.79 li
378.79 171.212 li
379.627 171.526 li
380.464 170.525 li
381.301 172.466 li
382.138 174.395 li
382.975 175.564 li
383.812 174.708 li
384.649 177.397 li
385.486 176.504 li
386.323 176.48 li
387.159 175.89 li
387.996 177.746 li
388.833 179.735 li
389.67 180.868 li
390.507 179.844 li
391.344 173.213 li
392.181 176.649 li
393.018 179.145 li
393.855 175.962 li
394.692 173.322 li
395.529 173.478 li
396.366 172.285 li
397.203 171.935 li
398.04 174.371 li
398.877 176.565 li
399.714 174.756 li
400.551 173.394 li
401.388 175.275 li
402.225 176.408 li
403.062 176.733 li
403.899 176.022 li
404.736 178.108 li
405.573 179.904 li
406.409 179.229 li
407.246 177.204 li
408.083 176.914 li
408.92 176.818 li
409.757 175.805 li
410.594 176.107 li
411.431 172.526 li
412.268 174.117 li
413.105 172.876 li
413.942 172.357 li
414.779 171.984 li
415.616 173.949 li
416.453 174.262 li
417.29 176.456 li
418.127 174.19 li
418.964 175.648 li
419.801 174.226 li
420.638 173.274 li
421.475 173.539 li
422.312 175.998 li
423.149 177.469 li
423.986 176.227 li
424.823 173.358 li
425.659 175.685 li
426.496 175.335 li
427.333 176.504 li
428.17 175.697 li
429.007 176.963 li
429.844 177.035 li
430.681 177.698 li
431.518 176.794 li
432.355 177.867 li
433.192 179.735 li
434.029 183.653 li
434.866 187.632 li
435.703 183.75 li
436.54 187.849 li
437.377 184.811 li
438.214 181.315 li
439.051 181.495 li
439.888 181.64 li
440.725 184.328 li
441.562 185.944 li
442.399 186.45 li
443.236 184.425 li
444.073 182.713 li
444.909 180.519 li
445.746 181.471 li
446.583 181.049 li
447.42 182.761 li
448.257 179.554 li
449.094 179.482 li
449.931 179.205 li
450.768 176.794 li
451.605 177.951 li
452.442 176.456 li
453.279 175.311 li
454.116 176.529 li
454.953 176.673 li
455.79 178.192 li
456.627 179.952 li
457.464 178.506 li
458.301 180.314 li
459.138 182.797 li
459.975 181.363 li
460.812 184.136 li
461.649 181.833 li
462.486 180.772 li
463.323 179.458 li
464.159 180.917 li
464.996 182.641 li
465.833 181.724 li
466.67 181.881 li
467.507 182.472 li
468.344 181.917 li
469.181 182.58 li
470.018 182.267 li
470.855 184.955 li
471.692 184.461 li
472.529 183.412 li
473.366 183.786 li
474.203 184.931 li
475.04 186.752 li
475.877 183.75 li
476.714 184.497 li
477.551 185.582 li
478.388 186.715 li
479.225 186.378 li
480.062 185.245 li
480.899 186.45 li
481.736 183.569 li
482.573 180.567 li
483.409 180.061 li
484.246 176.444 li
485.083 178.711 li
485.92 178.277 li
486.757 175.407 li
487.594 176.179 li
488.431 177.192 li
489.268 175.347 li
490.105 177.722 li
490.942 175.974 li
491.779 176.854 li
492.616 176.709 li
493.453 175.456 li
494.29 175.022 li
495.127 175.588 li
495.964 171.851 li
496.801 171.152 li
497.638 170.73 li
498.475 171.96 li
499.312 173.057 li
500.149 174.551 li
500.986 173.768 li
501.823 172.743 li
502.659 170.778 li
503.496 171.14 li
504.333 172.152 li
505.17 173.382 li
506.007 171.224 li
506.844 169.753 li
507.681 169.295 li
508.518 169.283 li
509.355 170.887 li
510.192 169.464 li
511.029 169.946 li
511.866 169.934 li
512.703 171.116 li
513.54 171.321 li
514.377 172.767 li
515.214 172.611 li
516.051 174.949 li
516.888 174.371 li
517.725 173.587 li
518.562 174.178 li
519.399 176.191 li
520.236 173.804 li
521.073 173.949 li
521.909 174.949 li
522.746 175.456 li
523.583 175.54 li
524.42 174.383 li
525.257 174.6 li
526.094 175.118 li
526.931 175.624 li
527.768 175.89 li
528.605 177.155 li
529.442 174.72 li
530.279 174.636 li
531.116 173.454 li
531.953 172.213 li
532.79 174.093 li
533.627 172.201 li
534.464 172.068 li
535.301 171.501 li
536.138 170.802 li
.228153 .943572 1 .198367 cmyk
@
112.638 181.537 mo
113.475 183.092 li
114.312 183.392 li
115.149 183.443 li
115.986 183.115 li
116.823 183.042 li
117.66 183.416 li
118.496 182.735 li
119.333 182.971 li
120.17 182.566 li
121.007 183.086 li
121.844 183.188 li
122.681 182.819 li
123.518 182.666 li
124.355 182.444 li
125.192 182.854 li
126.029 182.412 li
126.866 181.435 li
127.703 181.493 li
128.54 180.92 li
129.377 181.651 li
130.214 181.129 li
131.051 181.155 li
131.888 181.36 li
132.725 181.741 li
133.562 182.37 li
134.399 181.529 li
135.236 181.834 li
136.073 182.377 li
136.91 181.697 li
137.746 182.357 li
138.583 182.934 li
139.42 184.07 li
140.257 183.971 li
141.094 184.371 li
141.931 183.148 li
142.768 183.136 li
143.605 183.909 li
144.442 184.234 li
145.279 184.133 li
146.116 183.52 li
146.953 183.203 li
147.79 182.328 li
148.627 181.791 li
149.464 183.035 li
150.301 185.463 li
151.138 184.771 li
151.975 186.569 li
152.812 186.255 li
153.649 187.268 li
154.486 186.527 li
155.323 187.873 li
156.16 189.058 li
156.996 189.551 li
157.833 188.904 li
158.67 187.905 li
159.507 186.443 li
160.344 187.484 li
161.181 187.368 li
162.018 187.031 li
162.855 187.599 li
163.692 189.26 li
164.529 189.141 li
165.366 186.854 li
166.203 187.751 li
167.04 187.44 li
167.877 185.895 li
168.714 186.247 li
169.551 185.619 li
170.388 185.564 li
171.225 185.332 li
172.062 183.053 li
172.899 182.604 li
173.736 183.132 li
174.573 183.613 li
175.41 184.149 li
176.246 183.206 li
177.083 182.801 li
177.92 182.211 li
178.757 182.656 li
179.594 181.722 li
180.431 181.764 li
181.268 182.311 li
182.105 181.51 li
182.942 181.567 li
183.779 181.883 li
184.616 182.068 li
185.453 181.775 li
186.29 182.236 li
187.127 182.026 li
187.964 182.038 li
188.801 180.184 li
189.638 179.868 li
190.475 179.615 li
191.312 179.303 li
192.149 179.711 li
192.986 180.598 li
193.823 180.46 li
194.66 181.077 li
195.496 180.897 li
196.333 181.866 li
197.17 181.595 li
198.007 181.164 li
198.844 180.874 li
199.681 180.305 li
200.518 180.899 li
201.355 180.756 li
202.192 181.339 li
203.029 181.695 li
203.866 181.691 li
204.703 182.186 li
205.54 183.246 li
206.377 183.529 li
207.214 183.578 li
208.051 183.843 li
208.888 183.4 li
209.725 182.815 li
210.562 183.416 li
211.399 183.961 li
212.236 184.174 li
213.073 184.353 li
213.91 183.549 li
214.746 183.734 li
215.583 183.25 li
216.42 183.436 li
217.257 183.939 li
218.094 185.171 li
218.931 184.696 li
219.768 185.145 li
220.605 184.796 li
221.442 183.38 li
222.279 183.059 li
223.116 183.55 li
223.953 182.864 li
224.79 183.031 li
225.627 182.779 li
226.464 182.963 li
227.301 183.852 li
228.138 184.861 li
228.975 183.937 li
229.812 183.7 li
230.649 183.946 li
231.486 184.032 li
232.323 183.416 li
233.16 183.459 li
233.996 183.214 li
234.833 183.457 li
235.67 184.045 li
236.507 183.778 li
237.344 184.669 li
238.181 184.652 li
239.018 184.077 li
239.855 184.062 li
240.692 184.073 li
241.529 184.44 li
242.366 184.222 li
243.203 185.056 li
244.04 184.586 li
244.877 185.34 li
245.714 184.842 li
246.551 185.036 li
247.388 183.982 li
248.225 184.232 li
249.062 185.039 li
249.899 185.684 li
250.736 186.573 li
251.573 186.332 li
252.41 186.17 li
253.246 186.019 li
254.083 187.095 li
254.92 188.336 li
255.757 188.475 li
256.594 192.111 li
257.431 192.203 li
258.268 193.01 li
259.105 195.112 li
259.942 195.823 li
260.779 193.897 li
261.616 193.561 li
262.453 194.076 li
263.29 193.415 li
264.127 192.513 li
264.964 192.614 li
265.801 191.965 li
266.638 191.012 li
267.475 191.378 li
268.312 191.119 li
269.149 191.408 li
269.986 191.45 li
270.823 190.38 li
271.659 189.434 li
272.496 189.778 li
273.333 189.944 li
274.17 189.701 li
275.007 190.568 li
275.844 190.974 li
276.681 190.795 li
277.518 189.943 li
278.355 190.188 li
279.192 190.365 li
280.029 189.806 li
280.866 189.424 li
281.703 190.855 li
282.54 191.763 li
283.377 192.044 li
284.214 191.043 li
285.051 190.727 li
285.888 190.126 li
286.725 189.265 li
287.562 189.485 li
288.399 189.322 li
289.236 189.196 li
290.073 189.48 li
290.909 188.36 li
291.746 187.902 li
292.583 187.547 li
293.42 187.573 li
294.257 186.987 li
295.094 187.429 li
295.931 187.807 li
296.768 187.147 li
297.605 187.043 li
298.442 187.62 li
299.279 188.38 li
300.116 187.792 li
300.953 187.646 li
301.79 188.113 li
302.627 187.45 li
303.464 186.225 li
304.301 186.25 li
305.138 186.598 li
305.975 187.34 li
306.812 187.494 li
307.649 187.502 li
308.486 188.295 li
309.323 188.04 li
310.159 187.56 li
310.996 187.075 li
311.833 186.822 li
312.67 187.181 li
313.507 186.876 li
314.344 186.878 li
315.181 186.626 li
316.018 186.388 li
316.855 186.303 li
317.692 186.904 li
318.529 186.504 li
319.366 185.885 li
320.203 185.405 li
321.04 185.652 li
321.877 185.873 li
322.714 186.229 li
323.551 186.298 li
324.388 186.725 li
325.225 187.228 li
326.062 187.034 li
326.899 188.268 li
327.736 187.441 li
328.573 187.862 li
329.409 188.222 li
330.246 187.992 li
331.083 187.623 li
331.92 187.417 li
332.757 187.236 li
333.594 188.572 li
334.431 187.868 li
335.268 187.063 li
336.105 187.265 li
336.942 188.487 li
337.779 188.513 li
338.616 188.783 li
339.453 188.841 li
340.29 188.197 li
341.127 187.47 li
341.964 187.659 li
342.801 186.999 li
343.638 186.961 li
344.475 187.499 li
345.312 188.372 li
346.149 187.275 li
346.986 187.837 li
347.823 187.193 li
348.659 186.104 li
349.496 186.314 li
350.333 186.242 li
351.17 186.396 li
352.007 185.047 li
352.844 183.909 li
353.681 184.589 li
354.518 183.836 li
355.355 184.097 li
356.192 183.877 li
357.029 183.646 li
357.866 183.613 li
358.703 184.396 li
359.54 184.309 li
360.377 183.736 li
361.214 183.895 li
362.051 183.631 li
362.888 184.383 li
363.725 184.446 li
364.562 184.728 li
365.399 185.555 li
366.236 185.136 li
367.073 184.757 li
367.909 184.843 li
368.746 185.033 li
369.583 185.355 li
370.42 185.934 li
371.257 185.775 li
372.094 185.624 li
372.931 185.626 li
373.768 185.903 li
374.605 184.981 li
375.442 186.101 li
376.279 186.031 li
377.116 186.543 li
377.953 185.332 li
378.79 185.655 li
379.627 185.773 li
380.464 185.534 li
381.301 186.322 li
382.138 186.519 li
382.975 186.933 li
383.812 186.948 li
384.649 187.6 li
385.486 188.159 li
386.323 187.493 li
387.159 186.834 li
387.996 186.719 li
388.833 187.096 li
389.67 188.052 li
390.507 187.888 li
391.344 186.224 li
392.181 186.804 li
393.018 187.378 li
393.855 186.496 li
394.692 185.539 li
395.529 185.798 li
396.366 185.612 li
397.203 185.298 li
398.04 185.887 li
398.877 186.51 li
399.714 186.258 li
400.551 185.922 li
401.388 186.547 li
402.225 187.167 li
403.062 187.515 li
403.899 187.61 li
404.736 187.542 li
405.573 188.676 li
406.409 188.816 li
407.246 188.338 li
408.083 189.237 li
408.92 189.544 li
409.757 189.335 li
410.594 190.057 li
411.431 189.621 li
412.268 190.176 li
413.105 190.409 li
413.942 189.275 li
414.779 189.142 li
415.616 190.008 li
416.453 190.753 li
417.29 191.593 li
418.127 191.423 li
418.964 192.221 li
419.801 192.358 li
420.638 191.666 li
421.475 191.628 li
422.312 192.443 li
423.149 193.035 li
423.986 192.757 li
424.823 191.026 li
425.659 191.576 li
426.496 192.492 li
427.333 193.964 li
428.17 193.903 li
429.007 194.502 li
429.844 194.756 li
430.681 195.612 li
431.518 195.27 li
432.355 196.019 li
433.192 198.021 li
434.029 199.388 li
434.866 199.968 li
435.703 197.516 li
436.54 197.739 li
437.377 197.175 li
438.214 194.838 li
439.051 194.997 li
439.888 194.658 li
440.725 195.889 li
441.562 197.015 li
442.399 198.431 li
443.236 197.239 li
444.073 196.373 li
444.909 195.028 li
445.746 194.829 li
446.583 195.112 li
447.42 196.177 li
448.257 194.809 li
449.094 194.332 li
449.931 194.605 li
450.768 193.49 li
451.605 194.084 li
452.442 193.577 li
453.279 193.013 li
454.116 194.017 li
454.953 193.722 li
455.79 194.301 li
456.627 194.965 li
457.464 195.038 li
458.301 195.095 li
459.138 196.972 li
459.975 196.415 li
460.812 197.198 li
461.649 196.445 li
462.486 195.969 li
463.323 195.534 li
464.159 195.606 li
464.996 196.72 li
465.833 197.02 li
466.67 196.677 li
467.507 197.562 li
468.344 197.777 li
469.181 198.982 li
470.018 198.779 li
470.855 199.352 li
471.692 200.266 li
472.529 199.459 li
473.366 198.634 li
474.203 200.129 li
475.04 200.728 li
475.877 198.936 li
476.714 199.899 li
477.551 200.17 li
478.388 201.12 li
479.225 201.645 li
480.062 201.384 li
480.899 202.499 li
481.736 201.193 li
482.573 199.557 li
483.409 199.414 li
484.246 197.372 li
485.083 198.54 li
485.92 197.34 li
486.757 197.129 li
487.594 195.997 li
488.431 196.365 li
489.268 196.097 li
490.105 196.957 li
490.942 196.333 li
491.779 196.703 li
492.616 196.851 li
493.453 196.579 li
494.29 196.76 li
495.127 196.027 li
495.964 195.621 li
496.801 195.04 li
497.638 194.589 li
498.475 195.562 li
499.312 195.847 li
500.149 196.848 li
500.986 196.737 li
501.823 196.678 li
502.659 195.88 li
503.496 195.684 li
504.333 196.154 li
505.17 197.28 li
506.007 196.523 li
506.844 195.263 li
507.681 195.449 li
508.518 195.218 li
509.355 196.053 li
510.192 194.742 li
511.029 194.878 li
511.866 195.06 li
512.703 195.721 li
513.54 195.816 li
514.377 196.379 li
515.214 196.266 li
516.051 197.192 li
516.888 196.657 li
517.725 196.583 li
518.562 196.81 li
519.399 197.347 li
520.236 196.323 li
521.073 196.774 li
521.909 197.232 li
522.746 197.662 li
523.583 196.975 li
524.42 197.081 li
525.257 197.35 li
526.094 197.398 li
526.931 198.068 li
527.768 197.947 li
528.605 197.924 li
529.442 196.573 li
530.279 196.614 li
531.116 195.646 li
531.953 195.797 li
532.79 196.622 li
533.627 195.685 li
534.464 195.586 li
535.301 195.582 li
536.138 195.307 li
0 .552392 0 0 cmyk
@
119.138 159.5 mo
119.138 26 li
205.138 26 li
205.138 159.5 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QABMDF+Helvetica gcheck setglobal} if
1 9284 50 <00030050ffd505e805e5000f001b001c008a402c8705c700c701c302c808
c90a064308153a0f031b3a07091c021c1c0b1231031a1e18310b191d1ed8
216a66182b2b4ef44ded4e10f64ded12392f003f3fed3fed313043794032
001a0d26012509250526160e18320014001232011a081832001006123201
170c1532011302153201190a1b320011041b32002b2b2b2b012b2b2b2b2b
2b2b2b81005d001716111007022120272611103712210012351000232200
1114122103049bbb92a7c4fe95feadc2ad94be0174011bebfef1ebe4fee0
f701150e05e5fac3fed0feb7daff00e0d8014a012ad40110faa20179f501
03013cfec7fecff4feb1055e>QABMDF+Helvetica AddT42Char 
1 10356 54 <00020060ffd504f605e5002f003000fe405e290f27232626360e35214726
62267a0e7724096b08180e172502590e680eaa22030a0e3a2224220a0304
1c1886142f2f2b1c3a1403043a2b0930020a0e081124221f283030111825
17490825281a321f25114900252f193132a0216a89182b2b4ef44dedf4ed
4e10f64dedf4ed12392f1211393912113939003f3fed3fed12392f10ed11
1217392efd335d7131304379404d282e111f0008022602262d2506251a26
032c002b002d2e032c002b00052a082b011d131f2b001b15182b01191801
2d042b0009270b2b01250b012e042b000729042b001e121c2b0119161c2b
01002b2b2b2b10102b2b01103c2b2b2b2b103c2b2b2b2b2b2b818181005d
0116171633323736353427262f0126272635342433320415232627262322
06151417161f01161716151404232027263701011e073463fa705cb24b4c
a2c7c3518c0112fbe70143bb0f315bdab09a5a3bd0ce95518cfe9debfeee
9b9b03024d01da7d4e92203ea0783332252d2c355cb7c6fedff5763f7394
626c3220302f223b67c4f4d28c8bee040b00>QABMDF+Helvetica AddT42Char 
QABMDF+Helvetica /CharStrings get begin
/O 50 def
/S 54 def
end
QABMDF+Helvetica /Encoding get
dup 79 /O put
dup 83 /S put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QABMDF+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven /eight 10{/.notdef}rp /C 11{/.notdef}rp /O /P 2{/.notdef}rp /S 3{/.notdef}rp /W 9{/.notdef}rp /a 2{/.notdef}rp /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /.notdef /o 2{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]QABMDF+Helvetica nfQABMDF+Helvetica*1 [10 0 0 -10 0 0 ]msf156.138 37.75 mo(SSPO)sh123.138 34.25 mo
153.138 34.25 li
0 1 1 .00030518 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QABMDF+Helvetica gcheck setglobal} if
1 8832 48 <000100970000061705bd001300cb405944014b03020601090316011903d7
010513011c03140b1b0c57015803d401db03d40bdb0c0a040a040d450286
02045102970202290a280d380a380d4702570276020725640d0a02031203
01020b0c120306081517171a040405b8019b400d0a1f030b06fd0c0102fd
0d1f12b8019bb6130019147670182b4e10f43c4dfde419f43939f4393918
e4fd3c4e10456544e6003f173c3f3c1217394b5279b10d0cb801aab40201
020a0bb801aab202020387054d2e7afd047dc487052e7afd047dc4313000
5d727101725d71132109012111231134363501230115141615112397011d
01a601a3011abd04fe5dc5fe5a05be05bdfb2604dafa4303632dd077fb29
04d72d36dd34fc9d0000>QABMDF+Helvetica AddT42Char 
1 10080 53 <000200b40000057805bd0009002700944012070d49014805590158056905
641478050816bb01300119001b011c40422321202660127112751403121e
1f141c1503211e161404261224251e0009091b071e0b02261c1b08202515
1f251603310f691b1a29082625270a192829d6219566182b2b4ef43c4dfd
3c4e10f64df4edd4edd4ed003f3c3c3ffd12392f3cfd3c39111739011112
39391239395d1112392b3130015d01323635342726232111032132171615
1406071e011f011617161715232e012f012627262321112303478ca3723d
66fe1ac702a8a86dcf6d6256570507030b122ef40a0c040c0764397afe3b
c7031c70929d391efe0a02a1315efd84a833237280c55429461421133c56
f590311bfd8a>QABMDF+Helvetica AddT42Char 
QABMDF+Helvetica /CharStrings get begin
/M 48 def
/R 53 def
end
QABMDF+Helvetica /Encoding get
dup 77 /M put
dup 82 /R put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QABMDF+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven /eight 10{/.notdef}rp /C 9{/.notdef}rp /M /.notdef /O /P /.notdef /R /S 3{/.notdef}rp /W 9{/.notdef}rp /a 2{/.notdef}rp /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /.notdef /o 2{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]QABMDF+Helvetica nfQABMDF+Helvetica*1 [10 0 0 -10 0 0 ]msf156.138 50.7501 mo(RMR)[7.21985 8.32993 0 ]xsh123.138 47.25 mo
153.138 47.25 li
.208591 .855558 0 0 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QABMDF+Helvetica gcheck setglobal} if
1 6616 36 <0003001e0000053d05bd0002000a000b00da405048015801680103880397
04980aa90ab809b80a06280a010007060601020809090102080a00070501
8c01030420140a0a251209090114050525120606010b0b0503090a040605
010b02010300021e0708b80159400904030206090a030508b801a840120d
0d17171a059e019e0a190c0da1218c5e182b2b194ef4184dfdfd194e4565
44e6464418003f173c3f3c4dfd3cfd3c11393f011112393912393911392f
872e2b7d104b5158b004c01bb004c459872e182b7d104b5158b003c01bb0
03c4592b1112393912393987103c3c07103c3c3130015d5d005d010b0113
3301230321032301038edfed85e10215da95fdbb9fcc0290025a0289fd77
0363fa4301b8fe4805bd>QABMDF+Helvetica AddT42Char 
1 8752 47 <0001009c0000044b05bd000500314013000203021e040508031a07010225
0500190607b80153b321765e182b2b4ef43c4dfd3c4e10e6003f3c4dfd3c
3f31301333112115219cc702e8fc5105bdfaf2af>QABMDF+Helvetica AddT42Char 
QABMDF+Helvetica /CharStrings get begin
/A 36 def
/L 47 def
end
QABMDF+Helvetica /Encoding get
dup 65 /A put
dup 76 /L put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QABMDF+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven /eight 8{/.notdef}rp /A /.notdef /C 8{/.notdef}rp /L /M /.notdef /O /P /.notdef /R /S 3{/.notdef}rp /W 9{/.notdef}rp /a 2{/.notdef}rp /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /.notdef /o 2{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]QABMDF+Helvetica nfQABMDF+Helvetica*1 [10 0 0 -10 0 0 ]msf156.138 63.75 mo(OLMAR)[7.78 5.56 8.32993 6.66992 0 ]xsh123.138 60.25 mo
153.138 60.25 li
.887724 .768978 0 0 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
QABMDF+Helvetica*1 [10 0 0 -10 0 0 ]msf156.138 76.75 mo(CWMR)[7.21985 9.43985 8.32993 0 ]xsh123.138 73.25 mo
153.138 73.25 li
.331762 .928679 0 0 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
QABMDF+Helvetica*1 [10 0 0 -10 0 0 ]msf156.138 89.75 mo(PAMR)sh123.138 86.25 mo
153.138 86.25 li
.977081 .19968 1 .110842 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QABMDF+Helvetica gcheck setglobal} if
1 13328 70 <0002003bffe103d0044e001a001b00a7402fa719019818a808aa18034a08
119b14030314061d1a070d1d140b1b071b1b1710271201032702111a1d0a
2717191c1db80107b321727d182b2b4ef44ded4e10f63c4ded3939ed1239
2f003f3fed3fed12392f10ed313043794034001908250c150a26000e1310
260112110f1007190a26000500032101010204030b160d26000f120d2600
091806260104010621012b2b2b2b01103c103c2b2b103c103c2b2b2b8100
5d015d001617232e012322070615141633323637330e0123220235100033
0702d6e317af10727eac4a308892708319af1ef0bbd2fa0112d41c044eb0
d76383a86da0a1dc8977d5c50133e6011a013a05>QABMDF+Helvetica AddT42Char 
1 15604 81 <00020084000003ed04490019001a005e4031b706c7060204061406271476
06740705140c021418101d05070006180b0a1a071a1a000c29091a1c012e
18291900191b1cb80106b3216242182b2b4ef43c4dfde44e10f64ded1239
2f003f3f3c3f3fed1139390112393130005d015d1333153e013332171615
11231134272623220706070e011511230184ab4caa68e4502cb71d307e40
294a382d1bb401a7042f985e529f57a2fd5102a3623c640d1642357169fd
cf044900>QABMDF+Helvetica AddT42Char 
QABMDF+Helvetica /CharStrings get begin
/c 70 def
/n 81 def
end
QABMDF+Helvetica /Encoding get
dup 99 /c put
dup 110 /n put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QABMDF+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven /eight 8{/.notdef}rp /A /.notdef /C 8{/.notdef}rp /L /M /.notdef /O /P /.notdef /R /S 3{/.notdef}rp /W 9{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]QABMDF+Helvetica nfQABMDF+Helvetica*1 [10 0 0 -10 0 0 ]msf156.138 102.75 mo(Anticor)[6.66992 5.56 2.78 2.21985 5 5.56 0 ]xsh123.138 99.25 mo
153.138 99.25 li
.780575 0 1 0 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QABMDF+Helvetica gcheck setglobal} if
1 9112 49 <0002009c0000052a05bd0009000a00764014370138060207011701270147
0158020507010202b8019b4017120606070207080301020806080a030a0a
010608020302b8019bb505041a0c0708b8019b400a0900190b0ca0217670
182b2b4ef43c4dfd3c4e10f63c4dfd3c11123939392f003f3f3c3f3c1239
3904872e2b877dc53130005d015d13330111331123011123019ceb02e6bd
dffd0fbe023a05bdfb5a04a6fa4304a5fb5b05bd0000>QABMDF+Helvetica AddT42Char 
QABMDF+Helvetica /CharStrings get begin
/N 49 def
end
QABMDF+Helvetica /Encoding get
dup 78 /N put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QABMDF+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven /eight 8{/.notdef}rp /A /.notdef /C 8{/.notdef}rp /L /M /N /O /P /.notdef /R /S 3{/.notdef}rp /W 9{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]QABMDF+Helvetica nfQABMDF+Helvetica*1 [10 0 0 -10 0 0 ]msf156.138 115.75 mo(CORN)[7.21985 7.78 7.21985 0 ]xsh123.138 112.25 mo
153.138 112.25 li
.685389 0 .161105 0 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
QABMDF+Helvetica*1 [10 0 0 -10 0 0 ]msf156.138 128.75 mo(ONS)[7.78 7.21985 0 ]xsh123.138 125.25 mo
153.138 125.25 li
.930449 .507011 0 .000579843 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QABMDF+Helvetica gcheck setglobal} if
1 6896 37 <000300970000050405bd000a00150028008240385a0d5a116a026a0d6a11
7a02772107490d4811021d081f0f041f131e000027081e17020b1e270804
311b690f31231a2a091525281619292ab8015fb3217666182b2b4ef43c4d
fd3c4e10f64dedf4ed003ffd3fed12392ffd390111123931304379401218
1a0508192506260718042b01051a082b01002b012b2b2b8181015d5d0132
373635342726232111013237363534272623211103212017161514070607
16171615140706290102c47e466e754282fe9d01adb74e318f4c7dfe75c3
027701026d404f294d7138635985fedefd93035023378f90321cfe39fd5a
6a435fa03a1ffdfb05139a5b778b592f272b3660a98e73ac>QABMDF+Helvetica AddT42Char 
1 15064 78 <00010080000003f805bd000b00a740645902013a08011902010706170657
056705790678078705b903c903da030a05050608080709030284029402a4
020302391209090405060504066d12070708080705040305060908050204
030a00000403060a07060a061a0d09020a29000b190c0db22162b9011600
182b2b4ef43c4dfd3c3c194e10e618003f3c3c3f3c3f1112173901121739
874d2e2b087d10c104872e182b5d057d10c010083c083c3130015d00715d
7213331101330901230107112380ad01cee6fe6601b1e6feb297ad05bdfc
ab01c7fe6ffd62021c8afe6e0000>QABMDF+Helvetica AddT42Char 
2 372 86 <00020042ffd703b6044b002e002f012e408f38099805961299149815982a
062824252736214621472447275624572766246726790c790d790e762374
2474257426a61ea82c1303000b15052d042e13001a151b171c18152d142e
280f0b6908262536250225220d0a042b1318c61c1d1307041d2e9a2b0b2f
07090e100207002f212f1a1f18161827173e28260727281a310e1f27103e
00272e193031b221a65d182b2b4ef44dedf4fd394e10f64dfd3910f4fd39
11123939392f111239113939003f3feded3feded11121739713130437940
4c012d022615251a26210e1f21000926072101032c002100052a0721011d
121f21001b14182101200f22210021220e0d08270a21012625090a012d04
210006290421001e111c210119161c2101002b2b2b2b103c103c2b103c10
3c2b012b2b2b2b2b2b2b2b2b81005d5d015d13161716333236353427262f
01262726353436333217160723262726232206151417161f011617161514
062322262701ef082544a864983d27738f894174dbb9f26b4302aa05263e
99666945284e77c24269d9deefc70701b701505a3057575b4524161d2422
2a498198bc8e5a683d32474e40462a19131d2f2c45948fd0d9a002f9>QABMDF+Helvetica AddT42Char 
QABMDF+Helvetica /CharStrings get begin
/B 37 def
/k 78 def
/s 86 def
end
QABMDF+Helvetica /Encoding get
dup 66 /B put
dup 107 /k put
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QABMDF+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven /eight 8{/.notdef}rp /A /B /C 8{/.notdef}rp /L /M /N /O /P /.notdef /R /S 3{/.notdef}rp /W 9{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp /h /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /s /t /u /v 137{/.notdef}rp]QABMDF+Helvetica nfQABMDF+Helvetica*1 [10 0 0 -10 0 0 ]msf156.138 141.75 mo(Beststock)[6.66992 5.56 5 2.78 5 2.78 5.56 5 0 ]xsh123.138 138.25 mo
153.138 138.25 li
.228153 .943572 1 .198367 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
QABMDF+Helvetica*1 [10 0 0 -10 0 0 ]msf156.138 154.75 mo(Market)[8.32993 5.56 3.32993 5 5.56 0 ]xsh123.138 151.25 mo
153.138 151.25 li
0 .552392 0 0 cmyk
@
.5 lw
0 lj
119.138 159.5 mo
119.138 26 li
205.138 26 li
205.138 159.5 li
cp
1 /0 /CSD get_res sepcs
.851 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/QABMDF+Helvetica*1 uf/QABMDF+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
